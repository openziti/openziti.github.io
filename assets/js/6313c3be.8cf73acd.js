"use strict";(self.webpackChunkdocusaurus_3=self.webpackChunkdocusaurus_3||[]).push([[515],{56574:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"reference/tunnelers/index","title":"Tunnelers","description":"Each tunneler operates similarly. The goal is to have the tunneler seamlessly intercept traffic destined for Ziti","source":"@site/docs/reference/tunnelers/index.mdx","sourceDirName":"reference/tunnelers","slug":"/reference/tunnelers/","permalink":"/docs/reference/tunnelers/","draft":false,"unlisted":false,"editUrl":"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/reference/tunnelers/index.mdx","tags":[],"version":"current","lastUpdatedAt":1744078133000,"frontMatter":{"title":"Tunnelers"},"sidebar":"docsSidebar","previous":{"title":"Migrating","permalink":"/docs/reference/ha/migrating"},"next":{"title":"Windows","permalink":"/docs/reference/tunnelers/windows/"}}');var s=n(74848),i=n(28453);const a={title:"Tunnelers"},o=void 0,c={},l=[];function d(e){const t={a:"a",p:"p",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Each tunneler operates similarly. The goal is to have the tunneler seamlessly intercept traffic destined for Ziti\r\nservices and forward that traffic over the Ziti overlay instead of the ",(0,s.jsx)(t.a,{href:"/docs/reference/glossary#underlay",children:"underlay"}),"\r\nnetwork. All processes on the host can access the Ziti services available to the tunneler's loaded identities."]}),"\n",(0,s.jsx)(t.p,{children:"A tunneler configures a Ziti nameserver for resolving Ziti service addresses and associated Ziti IP routes in a device's\r\nOS. These are quickly updated when a policy change alters the visible Ziti services for any loaded Ziti identity."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(96540);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);