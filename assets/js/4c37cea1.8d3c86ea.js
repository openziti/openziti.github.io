"use strict";(self.webpackChunkdocusaurus_3=self.webpackChunkdocusaurus_3||[]).push([[7728],{41166:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>d,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"reference/tunnelers/docker/readme","title":"Run The Tunneler with Docker","description":"","source":"@site/docs/reference/tunnelers/70-docker/readme.mdx","sourceDirName":"reference/tunnelers/70-docker","slug":"/reference/tunnelers/docker/","permalink":"/docs/reference/tunnelers/docker/","draft":false,"unlisted":false,"editUrl":"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/reference/tunnelers/70-docker/readme.mdx","tags":[],"version":"current","lastUpdatedAt":1753712384000,"frontMatter":{"title":"Run The Tunneler with Docker","sidebar_label":"Docker","hide_table_of_contents":false},"sidebar":"docsSidebar","previous":{"title":"Troubleshooting","permalink":"/docs/reference/tunnelers/linux/linux-tunnel-troubleshooting"},"next":{"title":"Kubernetes","permalink":"/docs/reference/tunnelers/kubernetes/"}}');var r=t(74848),s=t(28453);function o(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"run-the-openziti-tunneler-with-docker",children:"Run The OpenZiti Tunneler with Docker"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"Persistent, writable volumes are necessary for the tunneler to manage identity files, e.g., certificate renewal."})}),"\n",(0,r.jsx)(n.h2,{id:"host-services-with-docker",children:"Host Services with Docker"}),"\n",(0,r.jsx)(n.p,{children:'The most popular way of using the Linux tunneler in Docker is to "host" an OpenZiti service, meaning as a reverse proxy and exit point from the OpenZiti network toward some target server. You can deploy the container before or after you grant it permission to start hosting the service and it will autonomously obey the OpenZiti controller.'}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"openziti/ziti-host"})," image simply runs ",(0,r.jsx)(n.code,{children:"ziti-edge-tunnel run-host"})," with the following helpful conventions for supplying an enrollment token and persisting the identity."]}),"\n",(0,r.jsx)(n.h3,{id:"enroll-and-persist-identity-in-a-volume",children:"Enroll and Persist Identity in a Volume"}),"\n",(0,r.jsxs)(n.p,{children:["Set the enrollment token and run the container. This example saves the identity file in the persistent volume: ",(0,r.jsx)(n.code,{children:"/ziti-edge-tunnel/ziti_id.json"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"services:\n    ziti-host:\n        image: docker.io/openziti/ziti-host\n        volumes:\n            - ziti-host:/ziti-edge-tunnel\n        environment:\n            - ZITI_ENROLL_TOKEN\nvolumes:\n    ziti-host:\n"})}),"\n",(0,r.jsx)(n.h3,{id:"use-an-enrolled-identity-from-the-environment",children:"Use an Enrolled Identity from the Environment"}),"\n",(0,r.jsx)(n.p,{children:"You may source an existing identity from an environment variable. The value will be written to the mounted volume and the variable ignored thereafter. The identity file in the mounted volume will be overwritten when the certificate is automatically renewed."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"services:\n    ziti-host:\n        image: docker.io/openziti/ziti-host\n        volumes:\n            - ziti-host:/ziti-edge-tunnel\n        environment:\n            - ZITI_IDENTITY_JSON\nvolumes:\n    ziti-host:\n"})}),"\n",(0,r.jsx)(n.h3,{id:"mount-a-writable-identity-file",children:"Mount a Writable Identity File"}),"\n",(0,r.jsxs)(n.p,{children:["You may mount an existing, writable identity file from the host's filesystem. The default path in the container's filesystem is ",(0,r.jsx)(n.code,{children:"/ziti-edge-tunnel/ziti_id.json"}),". Optionally, set ",(0,r.jsx)(n.code,{children:"ZITI_IDENTITY_BASENAME"})," to another filename prefix (default: ",(0,r.jsx)(n.code,{children:"ziti_id"}),"). Ensure the run-as UID",":GID"," has permission to read and write the file so that the tunneler can automatically renew its certificate."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ ls -ln ziti_id.json\n-rw-r--r-- 1 1001 1001 123456789 Jan 1 12:34 ziti_id.json\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'services:\n    ziti-host:\n        user: "1001:1001"\n        image: docker.io/openziti/ziti-host\n        volumes:\n            - ./ziti_id.json:/ziti-edge-tunnel/ziti_id.json\n'})}),"\n",(0,r.jsx)(n.h3,{id:"mount-a-writable-directory-of-identity-files",children:"Mount a Writable Directory of Identity Files"}),"\n",(0,r.jsxs)(n.p,{children:["You may mount a writable directory containing existing identities from the host's filesystem. The tunneler will load all valid, readable identities named ",(0,r.jsx)(n.code,{children:"/ziti-edge-tunnel/*.json"})," at startup. Ensure the run-as UID",":GID"," has permission to read, write, and list the files so that the tunneler can automatically renew its certificates."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ ls -lna identities\ndrwx------    1 1001 1001 4096 Apr 22 21:03 .\ndrwx-----x    2 1001 1001 4096 Apr 10 09:58 ..\n-rw-r--r--    1 1001 1001 6789 Jan  1 12:34 ziti_id.json\n-rw-r--r--    1 1001 1001 6789 Jan  1 12:34 ziti_id2.json\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'services:\n    ziti-host:\n        user: "1001:1001"\n        image: docker.io/openziti/ziti-host\n        volumes:\n            - ./identities:/ziti-edge-tunnel\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}var a=t(44860);const d={title:"Run The Tunneler with Docker",sidebar_label:"Docker",hide_table_of_contents:!1},c=void 0,u={},h=[{value:"Host Services with Docker",id:"host-services-with-docker",level:2},{value:"Enroll and Persist Identity in a Volume",id:"enroll-and-persist-identity-in-a-volume",level:3},{value:"Use an Enrolled Identity from the Environment",id:"use-an-enrolled-identity-from-the-environment",level:3},{value:"Mount a Writable Identity File",id:"mount-a-writable-identity-file",level:3},{value:"Mount a Writable Directory of Identity Files",id:"mount-a-writable-directory-of-identity-files",level:3}];function m(e){return(0,r.jsx)(a.A,{children:(0,r.jsx)(l,{})})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m()}},44860:(e,n,t)=>{t.d(n,{A:()=>o});var i=t(96540),r=t(28453),s=t(74848);const o=({children:e})=>{const n=(0,i.useRef)(!1);i.useEffect((()=>{n.current=!1}),[e]);const t={h1:e=>n.current?(0,s.jsx)("h1",{...e}):(n.current=!0,null)};return(0,s.jsx)(r.x,{components:t,children:e})}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(96540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);