"use strict";(self.webpackChunkopen_ziti=self.webpackChunkopen_ziti||[]).push([[2233],{57487:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(67294);function i(e){const{children:t,style:n}=e;return r.createElement("span",{style:n},r.createElement("span",{style:{color:"var(--ifm-color-primary)"}},t))}},47497:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>g,frontMatter:()=>s,metadata:()=>d,toc:()=>p});var r=n(87462),i=(n(67294),n(3905)),a=(n(50359),n(65471)),o=(n(9870),n(57487)),l=n(22004);const s={title:"Example Enabling BrowZer"},u=void 0,d={unversionedId:"learn/quickstarts/browzer/example/index",id:"learn/quickstarts/browzer/example/index",title:"Example Enabling BrowZer",description:"This page will demonstrate adding BrowZer to an existing network that was started using the",source:"@site/docs/learn/quickstarts/browzer/example/index.md",sourceDirName:"learn/quickstarts/browzer/example",slug:"/learn/quickstarts/browzer/example/",permalink:"/docs/learn/quickstarts/browzer/example/",draft:!1,editUrl:"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/learn/quickstarts/browzer/example/index.md",tags:[],version:"current",frontMatter:{title:"Example Enabling BrowZer"},sidebar:"docsSidebar",previous:{title:"Chrome Origin Trials",permalink:"/docs/learn/quickstarts/browzer/chrome-origin-trials"},next:{title:"Starting With Services",permalink:"/docs/learn/quickstarts/services/"}},c={},p=[{value:"Before you Begin",id:"before-you-begin",level:3},{value:"Get a Wildcard Certificate",id:"get-a-wildcard-certificate",level:3},{value:"Enable Certificate Access by Specific Users",id:"enable-certificate-access-by-specific-users",level:3},{value:"Install Ziti",id:"install-ziti",level:3},{value:"Run the Ziti Quickstart",id:"run-the-ziti-quickstart",level:4},{value:"Add WebSocket Support",id:"add-websocket-support",level:3},{value:"Install the Ziti Admin Console (ZAC)",id:"install-the-ziti-admin-console-zac",level:3},{value:"Configure the OIDC Provider",id:"configure-the-oidc-provider",level:3},{value:"Create a BrowZer env File",id:"create-a-browzer-env-file",level:2},{value:"Prepare the Network",id:"prepare-the-network",level:2},{value:"Try It Out",id:"try-it-out",level:3},{value:"If Needed, BrowZer Bootstrapper Logs",id:"if-needed-browzer-bootstrapper-logs",level:3},{value:"Cleaning up and Trying Again",id:"cleaning-up-and-trying-again",level:2}],h={toc:p},m="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This page will demonstrate adding BrowZer to an existing network that was started using the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/learn/quickstarts/network/hosted"},'"host it anywhere" quickstart'),". It will use Ubuntu Linux as well, if\nyour Linux distribution is different, change the commands accordingly. The August 18 2023 Ziti TV features a full\nwalkthrough and explanation of this whole page. If you are interested in watching a narrated and explained run\nthrough of this page, watch the video and follow along with the doc here."),(0,i.kt)(l.Z,{playing:!1,controls:!0,url:"https://youtu.be/ZPkOQbVEnW0?t=816",mdxType:"ReactPlayer"}),(0,i.kt)("h3",{id:"before-you-begin"},"Before you Begin"),(0,i.kt)("p",null,"This guide will use BASH. If you're using a different shell, it's up to you to translate any commands that don't work\ncorrectly (or run a BASH shell). This guide will expect you have set a variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"wildcard_url")," which represents\nthe root domain you want to enable BrowZer with. For this example, this guide uses and references this value\nfor the ",(0,i.kt)("inlineCode",{parentName:"p"},"wildcard_url=browzerexample.demo.openziti.org"),". ",(0,i.kt)(o.Z,{style:{fontWeight:"bold"},mdxType:"Highlight"},"(Make sure you set\nthis value)")),(0,i.kt)("p",null,"This quickstart will use ",(0,i.kt)("a",{parentName:"p",href:"https://www.docker.com/"},"Docker")," to obtain a wildcard certificate. You'll need to be\nfamiliar with Docker and have it installed to proceed, or you'll need to figure out alternative ways to obtain\na wildcard certificate."),(0,i.kt)("p",null,"If you already have an existing network, you'll likely want to skim through this document and pick out the\nsections that are relevant to your configuration."),(0,i.kt)("p",null,"If you lose your shell, one or more important variables may be lost. It is probably easiest to start again and follow\nthis guide, or you will need to ensure the variables are reset in the shell."),(0,i.kt)("p",null,"BrowZer also leverages an OIDC provider. Configuring and picking an OIDC provider are topics largely out of scope\nfor this document. This example will choose to use a provider that can delegate to other providers, hopefully making\nit simple to follow this guide. We'll be using ",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com"},"Auth0")," in this guide. "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"get-a-wildcard-certificate"},"Get a Wildcard Certificate"),(0,i.kt)("p",null,"First, to obtain the a wildcard certificate, I used Docker to run ",(0,i.kt)("a",{parentName:"p",href:"https://certbot.eff.org/"},"Certbot"),".\nOn the Certbot site there are instructions illustrating how to use Certbot. I chose to use Docker to run Certbot\ninstead of having to install Certbot on the machine. I was able to generate a wildcard certificate from LetsEncrypt for the\n",(0,i.kt)("inlineCode",{parentName:"p"},"${wildcard_url}")," domain using the ",(0,i.kt)("a",{parentName:"p",href:"https://letsencrypt.org/docs/challenge-types/#dns-01-challenge"},"DNS challenge method"),".  Also notice that Certbot can contact you as a\nreminder that your certificates are expiring. LetsEncrypt certs are only valid for 90 days, if you follow these\ninstructions remember that and plan on rotating the certs often. Set ",(0,i.kt)("inlineCode",{parentName:"p"},"your_email")," as shown below and obtain\ncertificates from LetsEncrypt now:"),(0,i.kt)(a.Z,{mdxType:"Details"},(0,i.kt)("summary",null,"Run Certbot via Docker"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'your_email="your.email@someserver.com"\nsudo docker run -it --rm --name certbot \\\n  -v "/etc/letsencrypt:/etc/letsencrypt" \\\n  -v "/var/lib/letsencrypt:/var/lib/letsencrypt" \\\n  certbot/certbot certonly -d "*.${wildcard_url}" \\\n                  --manual \\\n                  --preferred-challenges dns \\\n                  --email "${your_email}" \\\n                  --agree-tos\n'))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"enable-certificate-access-by-specific-users"},"Enable Certificate Access by Specific Users"),(0,i.kt)("p",null,"Certbot will make the files it creates available to root only (a good practice). If you run your network as root, this\nyou'll have no problems but generally, it's a better practice to not run as root when you don't need to. In order to run\nthis example as \"us\" (not the root user) we'll need to grant specific users the ability to read the files.  "),(0,i.kt)("p",null,'A flexible way to allow other processes to use/access these files is to make a new group and a new user, that is what\nis shown below. In linux, groups and users are assigned ids. 2171 looks like "ziti" so we\'ll use UID 2171 and GID 2171.\nThe example below will make a new group named ',(0,i.kt)("inlineCode",{parentName:"p"},"zitiweb"),". This group will then be granted ownership of the ",(0,i.kt)("inlineCode",{parentName:"p"},"letsencrypt"),"\nfolder via chown. Changing the ownership of the files to the group will allow any user in that group the ability to read\nthese files so be careful granting this group to users. Then we'll add the user we are currently logged in with to that\ngroup so that \"we\" can see the files for debugging or other purposes. Finally, we'll make a ",(0,i.kt)("inlineCode",{parentName:"p"},"ziggy")," user that is also in\nthis group so that if we want to, we can run processes as ziggy. Please plan accordingly here. This is just a reasonable\nexample to follow to get you going, change it to suit your needs and do not take this example as authoritative. There\nare many ways to solve this problem, it's up to you to pick 'the best' way."),(0,i.kt)(a.Z,{mdxType:"Details"},(0,i.kt)("summary",null,"Example Changing LetsEncrypt Permissions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"sudo groupadd -g 2171 zitiweb\nsudo useradd -u 2171 -M ziggy\nsudo usermod -aG zitiweb ziggy\nsudo usermod -aG zitiweb $USER\nsudo chown -R root:zitiweb /etc/letsencrypt/\nsudo chmod -R g+rX /etc/letsencrypt/\n")),(0,i.kt)("p",null,"You will want to enable the new group permissions in the current shell. Log out of your current session and log back\nin again. Doing so will enable the new group permission in your shell. After, set the ",(0,i.kt)("inlineCode",{parentName:"p"},"wildcard_url")," variable again.\nOnce set, verify you can access to the certificates:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"ls -l /etc/letsencrypt/live/${wildcard_url}/\n")),(0,i.kt)("p",null,"You should see something similar to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"total 8\n-rw-r--r-- 1 root zitiweb 692 Aug 17 21:12 README\nlrwxrwxrwx 1 root zitiweb  56 Aug 17 21:12 cert.pem -> ../../archive/browzerexample.demo.openziti.org/cert1.pem\nlrwxrwxrwx 1 root zitiweb  57 Aug 17 21:12 chain.pem -> ../../archive/browzerexample.demo.openziti.org/chain1.pem\nlrwxrwxrwx 1 root zitiweb  61 Aug 17 21:12 fullchain.pem -> ../../archive/browzerexample.demo.openziti.org/fullchain1.pem\nlrwxrwxrwx 1 root zitiweb  59 Aug 17 21:12 privkey.pem -> ../../archive/browzerexample.demo.openziti.org/privkey1.pem\n"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"install-ziti"},"Install Ziti"),(0,i.kt)("p",null,"BrowZer is built around OpenZiti. You'll need a network deployed. Since this guide is using\na legitimate 3rd party verifiable certificate from LetsEncrypt, we'll deploy a brand new network by\nfollowing the steps outlined in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/learn/quickstarts/network/hosted"},'"host it anywhere"'),"\nquickstart with ",(0,i.kt)(o.Z,{style:{fontWeight:"bold"},mdxType:"Highlight"},"one important exception"),"!\nWe are going to set two variables before running the quickstart to allow the servers to use the LetsEncrypt\nwildcard certificate:"),(0,i.kt)(a.Z,{mdxType:"Details"},(0,i.kt)("summary",null,"Setup for Alternative Server Certs"),(0,i.kt)("p",null,"Since we have just obtained some LetsEncrypt certificates, we'll enable OpenZiti with\nAlternative Server Certs ",(0,i.kt)("strong",{parentName:"p"},"immediately"),"! To do that we'll set two new variables\nintroduced with v0.29.0. Notice that the ",(0,i.kt)("inlineCode",{parentName:"p"},"${wildcard_url}")," variable needs to be set if it's not already set:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'export ZITI_PKI_ALT_SERVER_CERT="/etc/letsencrypt/live/${wildcard_url}/fullchain.pem"\nexport ZITI_PKI_ALT_SERVER_KEY="/etc/letsencrypt/live/${wildcard_url}/privkey.pem"\n'))),(0,i.kt)("h4",{id:"run-the-ziti-quickstart"},"Run the Ziti Quickstart"),(0,i.kt)("p",null,"With the ",(0,i.kt)("inlineCode",{parentName:"p"},"ZITI_PKI_ALT_*")," environment variables set, we are ready to follow the\n",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/docs/learn/quickstarts/network/hosted"},'"host it anywhere" quickstart'))," instructions.  Run the quickstart\nand return here when complete."),(0,i.kt)(a.Z,{mdxType:"Details"},(0,i.kt)("summary",null,"Verify that Ziti is Listening"),(0,i.kt)("p",null,"After completing the quickstart, you should be able to access the controller at both the alternate server cert url.\nNotice there's no need for 'insecure' (-sk) curl mode for the",(0,i.kt)("inlineCode",{parentName:"p"},"${wildcard_url}")," URL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"curl https://ctrl.${wildcard_url}:${ZITI_CTRL_EDGE_ADVERTISED_PORT}\n")),(0,i.kt)("p",null,"and we should be able to curl to the non-alternative server url. Note for this we need to use ",(0,i.kt)("inlineCode",{parentName:"p"},"-sk")," since this will\nbe the self-signed PKI endpoint:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"curl -sk https://${ZITI_CTRL_EDGE_ADVERTISED_ADDRESS}:${ZITI_CTRL_EDGE_ADVERTISED_PORT}\n"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"add-websocket-support"},"Add WebSocket Support"),(0,i.kt)("p",null,"BrowZer operates in a web browser. For it to connect to a router, BrowZer will attempt to connect to the router\nusing a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/WebSocket"},"web socket"),". We'll need to provision an edge router on the network that supports\n",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/WebSocket"},"web sockets"),". We will do that by modifying the configuration of the router provisioned in the quickstart."),(0,i.kt)(a.Z,{mdxType:"Details"},(0,i.kt)("summary",null,"Update edge router for WebSocket Support"),(0,i.kt)("p",null,"After completing the quickstart, you will have an edge router configuration file in the user's home directory.\nUse your favorite editor, such as ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Vim_(text_editor)"},(0,i.kt)("inlineCode",{parentName:"a"},"vim"))," to edit the file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"vi $ZITI_HOME/${ZITI_NETWORK}-edge-router.yaml\n")),(0,i.kt)("p",null,'Locate the "binding" section, and add a section that looks like this. Make sure to change the ',(0,i.kt)("inlineCode",{parentName:"p"},"address")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"advertise"),"\nfields accordingly to fit your ",(0,i.kt)("inlineCode",{parentName:"p"},"${wildcard_url}")," value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"  - binding: edge\n    address: wss:0.0.0.0:8447\n    options:\n      advertise: ws.browzerexample.demo.openziti.org:8447\n      connectTimeoutMs: 5000\n      getSessionTimeout: 60\n"))),(0,i.kt)(a.Z,{mdxType:"Details"},(0,i.kt)("summary",null,"Restart the Edge Router"),(0,i.kt)("p",null,"After updating the router's configuration file you'll need to restart the router:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"sudo systemctl restart ziti-router\n"))),(0,i.kt)(a.Z,{mdxType:"Details"},(0,i.kt)("summary",null,"Verify the edge router is Websocket Enabled"),(0,i.kt)("p",null,"After the router restarts you'll be able to verify the router is properly configured. The following curl statement\nshould succeed and return a 404 message similar to the one shown below. Note port 8447 is used, if you change this\nport you will obviously need to change the port number to the one you chose:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"curl https://ws.${wildcard_url}:8447\n"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"install-the-ziti-admin-console-zac"},"Install the Ziti Admin Console (ZAC)"),(0,i.kt)("p",null,"In this example, we will be protecting the Ziti Administration Console (ZAC) with BrowZer. That means we'll need to\ninstall ZAC first. Follow ",(0,i.kt)("a",{parentName:"p",href:"/docs/learn/quickstarts/zac/"},"the ZAC install guide"),".\nAfter installing ZAC, continue."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"configure-the-oidc-provider"},"Configure the OIDC Provider"),(0,i.kt)("p",null,"As stated in the ",(0,i.kt)("a",{parentName:"p",href:"#before-you-begin"},'"Before You Begin"')," section, we will be using Auth0 for this quickstart. Lett's\nconfigure Auth0 to be the BrowZer OIDC provider."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Begin by signing up and authenticating to Auth0."),(0,i.kt)("li",{parentName:"ul"},"Follow the 'vanillajs' quickstart from Auth0: ",(0,i.kt)("a",{parentName:"li",href:"https://auth0.com/docs/quickstart/spa/vanillajs/interactive"},"https://auth0.com/docs/quickstart/spa/vanillajs/interactive")),(0,i.kt)("li",{parentName:"ul"},"Configure the Callback URLs and Logout URLs. Replace the values accordingly, for me, I used:\nthe value ",(0,i.kt)("inlineCode",{parentName:"li"},"https://*.browzerexample.demo.openziti.org:8446"))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"create-a-browzer-env-file"},"Create a BrowZer env File"),(0,i.kt)("p",null,"At this point we have a functioning network. We're ready to start BrowZer-specific configuration.\nFirst we need to decide/find an OIDC provider.  "),(0,i.kt)("p",null,"Set a shell variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"AUTH0_DOMAIN"),' and set it to the value shown on the "Basic Information" page in Auth0. Then\nset a shell variable named ',(0,i.kt)("inlineCode",{parentName:"p"},"AUTHO_CLIENTID"),". For me, this looked like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"AUTH0_DOMAIN=dev-b2q0t23rxctngxka.us.auth0.com\nAUTH0_CLIENTID=mKWvp7xJHWxHKPf4eol4VwZxRCmdJIMy\n")),(0,i.kt)(a.Z,{mdxType:"Details"},(0,i.kt)("summary",null,"Generate the BrowZer.env File"),(0,i.kt)("admonition",{title:"Warning",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Make sure all variables listed below are set in your shell before running")),(0,i.kt)("p",null,"Now copy and paste this command to generate the browzer.env file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'export NODE_ENV=production\nexport ZITI_BROWZER_BOOTSTRAPPER_LOGLEVEL=debug\nexport ZITI_BROWZER_BOOTSTRAPPER_HOST=browzer.${wildcard_url}\nexport ZITI_BROWZER_RUNTIME_LOGLEVEL=debug\nexport ZITI_BROWZER_RUNTIME_HOTKEY=alt+F12\nexport ZITI_CONTROLLER_HOST=ctrl.${wildcard_url}\nexport ZITI_CONTROLLER_PORT=${ZITI_CTRL_EDGE_ADVERTISED_PORT}\nexport ZITI_BROWZER_BOOTSTRAPPER_SCHEME=https\nexport ZITI_BROWZER_BOOTSTRAPPER_CERTIFICATE_PATH=/etc/letsencrypt/live/${wildcard_url}/fullchain.pem\nexport ZITI_BROWZER_BOOTSTRAPPER_KEY_PATH=/etc/letsencrypt/live/${wildcard_url}/privkey.pem\nexport ZITI_BROWZER_BOOTSTRAPPER_LISTEN_PORT=8446\nexport ZITI_BROWZER_SERVICE=brozac\nexport ZITI_BROWZER_VHOST=${ZITI_BROWZER_SERVICE}.${wildcard_url}\nexport ZITI_BROWZER_OIDC_URL=https://${AUTH0_DOMAIN}\nexport ZITI_BROWZER_CLIENT_ID=${AUTH0_CLIENTID}\n\nexport ZITI_BROWZER_BOOTSTRAPPER_TARGETS="$(cat <<HERE\n  {\n    "targetArray": [\n      {\n        "vhost": "${ZITI_BROWZER_VHOST}",\n        "service": "${ZITI_BROWZER_SERVICE}",\n        "path": "/",\n        "scheme": "http",\n        "idp_issuer_base_url": "${ZITI_BROWZER_OIDC_URL}",\n        "idp_client_id": "${ZITI_BROWZER_CLIENT_ID}"\n      }\n    ]\n  }\nHERE\n)"\n\ncat > $ZITI_HOME/browzer.env << HERE\nZITI_BROWZER_BOOTSTRAPPER_HOST="${ZITI_BROWZER_BOOTSTRAPPER_HOST}"\nZITI_BROWZER_BOOTSTRAPPER_LOGLEVEL="${ZITI_BROWZER_BOOTSTRAPPER_LOGLEVEL}"\nZITI_BROWZER_RUNTIME_LOGLEVEL="${ZITI_BROWZER_RUNTIME_LOGLEVEL}"\nZITI_BROWZER_RUNTIME_HOTKEY="${ZITI_BROWZER_RUNTIME_HOTKEY}"\nZITI_CONTROLLER_HOST="${ZITI_CONTROLLER_HOST}"\nZITI_CONTROLLER_PORT="${ZITI_CONTROLLER_PORT}"\nZITI_BROWZER_BOOTSTRAPPER_SCHEME="${ZITI_BROWZER_BOOTSTRAPPER_SCHEME}"\nZITI_BROWZER_BOOTSTRAPPER_CERTIFICATE_PATH="${ZITI_BROWZER_BOOTSTRAPPER_CERTIFICATE_PATH}"\nZITI_BROWZER_BOOTSTRAPPER_KEY_PATH="${ZITI_BROWZER_BOOTSTRAPPER_KEY_PATH}"\nZITI_BROWZER_BOOTSTRAPPER_LISTEN_PORT="${ZITI_BROWZER_BOOTSTRAPPER_LISTEN_PORT}"\nZITI_BROWZER_BOOTSTRAPPER_TARGETS=\'${ZITI_BROWZER_BOOTSTRAPPER_TARGETS}\'\nNODE_EXTRA_CA_CERTS=node_modules/node_extra_ca_certs_mozilla_bundle/ca_bundle/ca_intermediate_root_bundle.pem\nHERE\necho browzer env file written to: $ZITI_HOME/browzer.env\n'))),(0,i.kt)(a.Z,{mdxType:"Details"},(0,i.kt)("summary",null,"Inspect the browzer.env File"),(0,i.kt)("p",null,"You should see something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"browzer env file written to: /home/ubuntu/.ziti/quickstart/ip-172-31-47-200/browzer.env\n")),(0,i.kt)("p",null,"Open this file up and visually inspect it to verify the file seems to be full, complete and not missing anything\nobvious. If you had verified all the variables used in the previous command were set, this file will be correctly\ncreated.")),(0,i.kt)(a.Z,{mdxType:"Details"},(0,i.kt)("summary",null,"Install BrowZer"),(0,i.kt)("p",null,"BrowZer is ready to be installed. The ",(0,i.kt)("a",{parentName:"p",href:"/docs/learn/quickstarts/browzer/"},"main BrowZer page")," has two sections showing you how to\ninstall BrowZer either by ",(0,i.kt)("a",{parentName:"p",href:"/docs/learn/quickstarts/browzer/#cloning-from-github"},"cloning from GitHub"),"\nor by ",(0,i.kt)("a",{parentName:"p",href:"/docs/learn/quickstarts/browzer/#running-via-docker"},"Running via Docker"),'. I have\nused the "clone" approach to run my BrowZer (and ZAC).'),(0,i.kt)("p",null,"Follow one of those methods and ensure BrowZer is up and running."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"browzer env file written to: /home/ubuntu/.ziti/quickstart/ip-172-31-47-200/browzer.env\n")),(0,i.kt)("p",null,"Open this file up and visually inspect it to verify the file seems to be full, complete and not missing anything\nobvious. If you had verified all the variables used in the previous command were set, this file will be correctly\ncreated.")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"prepare-the-network"},"Prepare the Network"),(0,i.kt)("p",null,"For the following steps, make sure you have all the variables set and make sure you have logged into the controller:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"ziti edge login -u $ZITI_USER -p $ZITI_PWD -y ${ZITI_CTRL_EDGE_ADVERTISED_ADDRESS}:${ZITI_CTRL_EDGE_ADVERTISED_PORT}\n")),(0,i.kt)(a.Z,{mdxType:"Details"},(0,i.kt)("summary",null,"Configure the External JWT Signer and Auth Policy"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'echo "configuring OpenZiti for BrowZer..."\nziti_object_prefix=browzer-auth0\nissuer=$(curl -s ${ZITI_BROWZER_OIDC_URL}/.well-known/openid-configuration | jq -r .issuer)\njwks=$(curl -s ${ZITI_BROWZER_OIDC_URL}/.well-known/openid-configuration | jq -r .jwks_uri)\n\necho "OIDC issuer   : $issuer"\necho "OIDC jwks url : $jwks"\n\next_jwt_signer=$(ziti edge create ext-jwt-signer "${ziti_object_prefix}-ext-jwt-signer" "${issuer}" --jwks-endpoint "${jwks}" --audience "${ZITI_BROWZER_CLIENT_ID}" --claims-property email)\necho "ext jwt signer id: $ext_jwt_signer"\n\nauth_policy=$(ziti edge create auth-policy "${ziti_object_prefix}-auth-policy" --primary-ext-jwt-allowed --primary-ext-jwt-allowed-signers ${ext_jwt_signer})\necho "auth policy id: $auth_policy"\n')),(0,i.kt)("p",null,"After running the commands listed above, you should see output that confirms an ",(0,i.kt)("inlineCode",{parentName:"p"},"ext-jwt-signer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"auth-policy")," were\ncreated successfully. It should look similar to what is shown below. Ensure the id's for the signer and auth policy\nhave some value and are not blank:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"configuring OpenZiti for BrowZer...\nOIDC issuer   : https://dev-b2q0t23rxctngxka.us.auth0.com/\nOIDC jwks url : https://dev-b2q0t23rxctngxka.us.auth0.com/.well-known/jwks.json\next jwt signer id: 23sRIAoaPqh9RDoFO8iwGZ\nauth policy id: 6EbCIB8ke40SI8eQxc3O0X\n"))),(0,i.kt)(a.Z,{mdxType:"Details"},(0,i.kt)("summary",null,"Add a Service to Access an HTTP Web App"),(0,i.kt)("p",null,"To enable access to the ZAC using BrowZer we need to make a service. Things to notice here are that we are using the\nHTTP port (the BrowZer Bootstrapper will provide HTTPS) and we're using the default port of 1408. Ensure the variables\nreferenced are all set accordingly and then copy/paste these commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'intercept_address="${ZITI_BROWZER_SERVICE}.ziti"\nintercept_port=80\noffload_address=127.0.0.1\noffload_port=1408\n\nfunction createService {\nziti edge create config ${ZITI_BROWZER_SERVICE}.host.config host.v1 \'{"protocol":"tcp", "address":"\'"${offload_address}"\'", "port":\'${offload_port}\'}\'\nziti edge create config ${ZITI_BROWZER_SERVICE}.int.config  intercept.v1 \'{"protocols":["tcp"],"addresses":["\'"${intercept_address}"\'"], "portRanges":[{"low":\'${intercept_port}\', "high":\'${intercept_port}\'}]}\'\nziti edge create service "${ZITI_BROWZER_SERVICE}" --configs "${ZITI_BROWZER_SERVICE}.host.config","${ZITI_BROWZER_SERVICE}.int.config"\nziti edge create service-policy "${ZITI_BROWZER_SERVICE}.bind" Bind --service-roles "@${ZITI_BROWZER_SERVICE}" --identity-roles "#${ZITI_BROWZER_SERVICE}.binders"\nziti edge create service-policy "${ZITI_BROWZER_SERVICE}.dial" Dial --service-roles "@${ZITI_BROWZER_SERVICE}" --identity-roles "#${ZITI_BROWZER_SERVICE}.dialers"\n}\n\nfunction deleteService {\nziti edge delete config  where \'name contains "\'"${ZITI_BROWZER_SERVICE}"\'."\'\nziti edge delete service where \'name = "\'"${ZITI_BROWZER_SERVICE}"\'"\'\nziti edge delete sp      where \'name contains "\'"${ZITI_BROWZER_SERVICE}"\'."\'\n}\n\ncreateService\n\n')),(0,i.kt)("p",null,"Verify the commands all succeed (no errors shown) and the output looks similar to this after running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"New config brozac.host.config created with id: 5i85SF4pnehz1LEjJNvCtH\nNew config brozac.int.config created with id: 2p8xuev7Vb9NzuZoEGi4tq\nNew service brozac created with id: 5Ry0BOMr6VJGQjF51LdDxv\nNew service policy brozac.bind created with id: 8EoBqEhKeIKQLQxY5zr3Z\nNew service policy brozac.dial created with id: 1TUzPYdN3GpGdA4k9Uauv3\n"))),(0,i.kt)(a.Z,{mdxType:"Details"},(0,i.kt)("summary",null,"Associate/Update Identities with the Auth Policy"),(0,i.kt)("p",null,"Now we need to associate the claims presented by the OIDC provider with one or more identities inside the\nnetwork. Since we have decided to use Auth0, in the previous step we were able to create an ",(0,i.kt)("inlineCode",{parentName:"p"},"ext-jwt-signer")," and\nreference the claim named ",(0,i.kt)("inlineCode",{parentName:"p"},"email"),". Since we chose Auth0, I know that it will provide this particular claim to OpenZiti\nafter the user logs into the OIDC provider. If your OIDC provider doesn't provide ",(0,i.kt)("inlineCode",{parentName:"p"},"email"),", you'll have to\nlearn/explore/understand how the OIDC provider you're using works. It's out of scope of this document to provide\nthat sort of insight. Set a variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"ZITI_BROWZER_IDENTITIES")," and assign it an email address you plan to use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'ZITI_BROWZER_IDENTITIES="clint.dovholuk@company.name"\n')),(0,i.kt)("p",null,"After create a ",(0,i.kt)("strong",{parentName:"p"},"space")," delimited list (one value/email is fine too), copy and paste the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'echo "creating users specified by ZITI_BROWZER_IDENTITIES: ${ZITI_BROWZER_IDENTITIES}"\nfor id in ${ZITI_BROWZER_IDENTITIES}; do\nziti edge create identity user "${id}" --auth-policy ${auth_policy} --external-id "${id}" -a "${ZITI_BROWZER_SERVICE}.dialers"\ndone\n\n#ziti edge update identity "${id}" -a $(ziti edge list identities \'name="\'${id}\'"\' -j | jq -r \'.data[].roleAttributes | map(. // "") | @csv\'),"${ZITI_BROWZER_SERVICE}.dialers"\nziti edge update identity "${ZITI_ROUTER_NAME}" -a "${ZITI_BROWZER_SERVICE}.binders"\n')),(0,i.kt)("p",null,"After you run that command you should see output looking similar to this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"creating users specified by ZITI_BROWZER_IDENTITIES: clint.dovholuk@company.name\nNew identity clint.dovholuk@company.name created with id: hmnQByTn3\n"))),(0,i.kt)("h3",{id:"try-it-out"},"Try It Out"),(0,i.kt)("p",null,"This is it! This is the moment we've been working for.  Copy and paste this command to echo to the screen the url to\ntest out and let's see ZAC protected by BrowZer!!!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'echo " "\necho "now go to: https://${ZITI_BROWZER_VHOST}:${ZITI_BROWZER_BOOTSTRAPPER_LISTEN_PORT} and see your ${ZITI_BROWZER_SERVICE}!"\necho " "\n')),(0,i.kt)("h3",{id:"if-needed-browzer-bootstrapper-logs"},"If Needed, BrowZer Bootstrapper Logs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"journalctl -fu browzer-bootstrapper\n")),(0,i.kt)("h2",{id:"cleaning-up-and-trying-again"},"Cleaning up and Trying Again"),(0,i.kt)("p",null,"To clean everything up and try it all over (if you need to) run these commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"sudo systemctl stop browzer-bootstrapper\nsudo systemctl stop ziti-controller \nsudo systemctl stop ziti-router\nsudo rm -rf $HOME/.ziti/quickstart\nunsetZitiEnv\ncd \n")))}g.isMDXComponent=!0}}]);