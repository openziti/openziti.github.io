"use strict";(self.webpackChunkdocusaurus_3=self.webpackChunkdocusaurus_3||[]).push([[6634],{90407:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"learn/core-concepts/security/authentication/authentication-policies","title":"Authentication Policies","description":"Authentication Policies restrict the primary authentication methods available to","source":"@site/docs/learn/core-concepts/security/authentication/30-authentication-policies.md","sourceDirName":"learn/core-concepts/security/authentication","slug":"/learn/core-concepts/security/authentication/authentication-policies","permalink":"/docs/learn/core-concepts/security/authentication/authentication-policies","draft":false,"unlisted":false,"editUrl":"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/learn/core-concepts/security/authentication/30-authentication-policies.md","tags":[],"version":"current","lastUpdatedAt":1743513678000,"sidebarPosition":30,"frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"API Session Certificates","permalink":"/docs/learn/core-concepts/security/authentication/api-session-certificates"},"next":{"title":"Certificate Management","permalink":"/docs/learn/core-concepts/security/authentication/certificate-management"}}');var a=t(74848),s=t(28453);const r={},c="Authentication Policies",l={},o=[{value:"Sections",id:"sections",level:2},{value:"Primary",id:"primary",level:3},{value:"Certificate (cert)",id:"certificate-cert",level:4},{value:"External JWT Signers (extJwt)",id:"external-jwt-signers-extjwt",level:4},{value:"Username Password (updb)",id:"username-password-updb",level:4},{value:"Secondary",id:"secondary",level:3}];function d(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"authentication-policies",children:"Authentication Policies"})}),"\n",(0,a.jsxs)(i.p,{children:["Authentication Policies restrict the ",(0,a.jsx)(i.a,{href:"./auth#primary-authentication",children:"primary authentication"})," methods available to\nidentities and may enforce additional ",(0,a.jsx)(i.a,{href:"./auth#secondary-authentication",children:"secondary authentication"})," factors. Ziti is\ndeployed with a default authentication policy that has the id ",(0,a.jsx)(i.code,{children:"default"}),". This authentication policy may be updated,\nbut not deleted. This default authentication policy is used when identities are created and an authentication\npolicy is not specified."]}),"\n",(0,a.jsx)(i.p,{children:"Example: Authentication Policy"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-text",children:'{\n    "createdAt": "2022-05-20T14:02:53.359Z",\n    "id": "default",\n    "tags": {},\n    "updatedAt": "2022-05-20T14:02:53.359Z",\n    "name": "Default",\n    "primary": {\n        "cert": {\n            "allowExpiredCerts": true,\n            "allowed": true\n        },\n        "extJwt": {\n            "allowed": true,\n            "allowedSigners": null\n        },\n        "updb": {\n            "allowed": true,\n            "lockoutDurationMinutes": 0,\n            "maxAttempts": 0\n        }\n    },\n    "secondary": {\n        "requireTotp": false,\n        "requireExtJwt": ""\n    }\n}\n'})}),"\n",(0,a.jsx)(i.h2,{id:"sections",children:"Sections"}),"\n",(0,a.jsx)(i.p,{children:"An authentication policy is split into two separate major sections:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"primary"})," - initial authentication to establish the authenticating principal"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"secondary"})," - additional MFA authentication challenges"]}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"primary",children:"Primary"}),"\n",(0,a.jsx)(i.p,{children:"The primary section allow or disposals various authentication mechanisms used to establish the initial principal\n(identity) authenticating. A viable authentication policy must allow at least one primary authentication mechanism."}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"cert"})," - x509 certificate based authentication"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"extJwt"})," - externally signed JWT bearer tokens"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"updb"}),' - "username password database" which power traditional username/password authentication']}),"\n"]}),"\n",(0,a.jsx)(i.h4,{id:"certificate-cert",children:"Certificate (cert)"}),"\n",(0,a.jsx)(i.p,{children:"Fields:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"allowed"})," - enables/disabled x509 certificate authentication"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"allowExpiredCerts"})," - allows expired client certificates to authenticate"]}),"\n"]}),"\n",(0,a.jsxs)(i.p,{children:["When certificate authentication is ",(0,a.jsx)(i.code,{children:"allowed"}),", client certificates issued by the Ziti PKI and any verified and enabled\n",(0,a.jsx)(i.a,{href:"./third-party-cas",children:"3rd Party CAs"})," become valid authentication paths. When disabled an identity will not be able\nto authenticate with any client certificate."]}),"\n",(0,a.jsxs)(i.p,{children:["If ",(0,a.jsx)(i.code,{children:"allowExpiredCerts"})," is true, client certificate expiration will be ignored during validation. This setting is\nuseful in scenarios where client are running software that has lapsed and cannot be re-enrolled or their client\ncertificates cannot be updated. Clients do have an API available to them to roll existing Ziti PKI issued client\ncertificates forward. Client certificates issued by a ",(0,a.jsx)(i.a,{href:"./third-party-cas",children:"3rd Party CAs"})," must have an external\nprocess to maintain client certificate validity if ",(0,a.jsx)(i.code,{children:"allowExpiredCerts"})," is false."]}),"\n",(0,a.jsx)(i.h4,{id:"external-jwt-signers-extjwt",children:"External JWT Signers (extJwt)"}),"\n",(0,a.jsx)(i.p,{children:"Fields:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"allowed"})," - whether external JWTs may be used for authentication"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"allowedSigners"})," - the ids of valid ",(0,a.jsx)(i.a,{href:"./external-jwt-signers",children:"External JWT Signers"})]}),"\n"]}),"\n",(0,a.jsxs)(i.p,{children:["If ",(0,a.jsx)(i.code,{children:"allowed"})," is true the ",(0,a.jsx)(i.a,{href:"./external-jwt-signers",children:"External JWT Signers"})," specified in the ",(0,a.jsx)(i.code,{children:"allowedSigners"})," field\nmay be used for authentication."]}),"\n",(0,a.jsx)(i.h4,{id:"username-password-updb",children:"Username Password (updb)"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"allowed"})," - whether UPDB may be used for authentication"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"maxAttempts"})," - the maximum number of invalid logins allowed before an identity is locked for ",(0,a.jsx)(i.code,{children:"lockoutDurationMinutes"}),", 0 for never"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"lockoutDurationMinutes"})," - the number of minutes to lock identities after ",(0,a.jsx)(i.code,{children:"maxAttempts"})," is reached, 0 for forever"]}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"secondary",children:"Secondary"}),"\n",(0,a.jsx)(i.p,{children:"The secondary section contain only two top-level configuration values:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"requireTotp"})," - if true authenticating clients must have ",(0,a.jsx)(i.a,{href:"./totp",children:"MFA TOTP"})," enabled"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"requireExtJwt"})," - if set to an id of an ",(0,a.jsx)(i.a,{href:"./external-jwt-signers",children:"External JWT Signer"})," every request must have a valid JWT in the HTTP ",(0,a.jsx)(i.code,{children:"Authentication"})," header"]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>r,x:()=>c});var n=t(96540);const a={},s=n.createContext(a);function r(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);