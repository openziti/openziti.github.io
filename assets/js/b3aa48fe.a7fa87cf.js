"use strict";(self.webpackChunkdocusaurus_3=self.webpackChunkdocusaurus_3||[]).push([[7083],{10600:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"guides/troubleshooting/pki-troubleshooting/renew-cert","title":"Renewing Leaf Certificates","description":"The network uses a combination of client, server, and CA certificates in its PKI. The most important certificates to renew are routers\' client and server certificates and identities\' client certificates.","source":"@site/docs/guides/troubleshooting/pki-troubleshooting/renew-cert.md","sourceDirName":"guides/troubleshooting/pki-troubleshooting","slug":"/guides/troubleshooting/pki-troubleshooting/renew-cert","permalink":"/docs/guides/troubleshooting/pki-troubleshooting/renew-cert","draft":false,"unlisted":false,"editUrl":"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/guides/troubleshooting/pki-troubleshooting/renew-cert.md","tags":[],"version":"current","lastUpdatedAt":1743525953000,"frontMatter":{"title":"Renewing Leaf Certificates","sidebar_label":"Renewed Certs","id":"renew-cert"},"sidebar":"docsSidebar","previous":{"title":"PKI Troubleshooting","permalink":"/docs/guides/troubleshooting/pki-troubleshooting/"},"next":{"title":"Expired Certs","permalink":"/docs/guides/troubleshooting/pki-troubleshooting/troubleshoot-expired-certs"}}');var i=n(74848),s=n(28453);const o={title:"Renewing Leaf Certificates",sidebar_label:"Renewed Certs",id:"renew-cert"},c=void 0,l={},a=[{value:"Creating New Certs",id:"creating-new-certs",level:2},{value:"Setup Environment Variables",id:"setup-environment-variables",level:3},{value:"Control Plane Certs",id:"control-plane-certs",level:3},{value:"Server Cert",id:"server-cert",level:4},{value:"Client Cert",id:"client-cert",level:4},{value:"Edge / API Certs",id:"edge--api-certs",level:3},{value:"Update environment for edge certs",id:"update-environment-for-edge-certs",level:4},{value:"Server Cert",id:"server-cert-1",level:4},{value:"Client Cert",id:"client-cert-1",level:4},{value:"Update Controller Config",id:"update-controller-config",level:2}];function d(e){const t={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"The network uses a combination of client, server, and CA certificates in its PKI. The most important certificates to renew are routers' client and server certificates and identities' client certificates."}),"\n",(0,i.jsx)(t.h2,{id:"creating-new-certs",children:"Creating New Certs"}),"\n",(0,i.jsx)(t.h3,{id:"setup-environment-variables",children:"Setup Environment Variables"}),"\n",(0,i.jsxs)(t.p,{children:["The following environment variables are the minimum required to renew a cert with the ",(0,i.jsx)(t.code,{children:"ziti-cli-functions.sh"})," script.\nThese can be obtained through the ",(0,i.jsx)(t.code,{children:".env"})," file for your network. However, it is recommended that the ",(0,i.jsx)(t.code,{children:"FILE_NAME_ROOT"})," value is different than\nthe existing (expired) cert filenames so a new cert will be created rather than overwriting the existing cert."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",children:'# Path to the network PKI root folder\nexport ZITI_PKI="/home/ubuntu/.ziti/quickstart/homeassistant2/pki"\n\n# The DNS entries the PKI should be valid for\nexport DNS_ALLOW_LIST="localhost,homeassistant2"\n\n# The IP addresses the PKI should be valid for\nexport IP_ALLOW_LIST="127.0.0.1,150.136.141.199"\n'})}),"\n",(0,i.jsx)(t.h3,{id:"control-plane-certs",children:"Control Plane Certs"}),"\n",(0,i.jsx)(t.p,{children:"The following values are unique to control plane certs as the edge/API plane will have its own CA and certs. Update\nthese values as they pertain to your network PKI setup."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",children:'export ZITI_CA_NAME="homeassistant2-intermediate"\nexport FILE_NAME_ROOT="homeassistant2-new"\n'})}),"\n",(0,i.jsx)(t.h4,{id:"server-cert",children:"Server Cert"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",children:'source /dev/stdin <<< "$(wget -qO- https://get.openziti.io/quick/ziti-cli-functions.sh)"; expressInstall\nziti pki create server --pki-root="${ZITI_PKI}" --ca-name "${ZITI_CA_NAME}" \\\n      --server-file "${FILE_NAME_ROOT}-server" \\\n      --dns "${DNS_ALLOW_LIST}" --ip "${IP_ALLOW_LIST}" \\\n      --server-name "${FILE_NAME_ROOT} server certificate"\n'})}),"\n",(0,i.jsx)(t.h4,{id:"client-cert",children:"Client Cert"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'ziti pki create client --pki-root="${ZITI_PKI}" --ca-name "${ZITI_CA_NAME}" \\\n          --client-file "${FILE_NAME_ROOT}-client" \\\n          --key-file "${FILE_NAME_ROOT}-server" \\\n          --client-name "${FILE_NAME_ROOT}"\n'})}),"\n",(0,i.jsx)(t.h3,{id:"edge--api-certs",children:"Edge / API Certs"}),"\n",(0,i.jsx)(t.h4,{id:"update-environment-for-edge-certs",children:"Update environment for edge certs"}),"\n",(0,i.jsx)(t.p,{children:"The following values are unique to edge/API plane certs as the control plane will have its own CA and certs. Update\nthese values as they pertain to your network PKI setup."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'export ZITI_CA_NAME="150.136.141.199-intermediate"\nexport FILE_NAME_ROOT="150.136.141.199-new"\n'})}),"\n",(0,i.jsx)(t.h4,{id:"server-cert-1",children:"Server Cert"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'ziti pki create server --pki-root="${ZITI_PKI}" --ca-name "${ZITI_CA_NAME}" \\\n      --server-file "${FILE_NAME_ROOT}-server" \\\n      --dns "${DNS_ALLOW_LIST}" --ip "${IP_ALLOW_LIST}" \\\n      --server-name "${FILE_NAME_ROOT} server certificate"\n'})}),"\n",(0,i.jsx)(t.h4,{id:"client-cert-1",children:"Client Cert"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'ziti pki create client --pki-root="${ZITI_PKI}" --ca-name "${ZITI_CA_NAME}" \\\n          --client-file "${FILE_NAME_ROOT}-client" \\\n          --key-file "${FILE_NAME_ROOT}-server" \\\n          --client-name "${FILE_NAME_ROOT}"\n'})}),"\n",(0,i.jsx)(t.h2,{id:"update-controller-config",children:"Update Controller Config"}),"\n",(0,i.jsxs)(t.p,{children:["If the original files were overwritten, no change is needed. However, if new files were generated alongside existing\nfiles, the controller config ",(0,i.jsx)(t.code,{children:"identity"})," and ",(0,i.jsx)(t.code,{children:"web--\x3eidentity"})," sections need the ",(0,i.jsx)(t.code,{children:"cert"}),", ",(0,i.jsx)(t.code,{children:"server_cert"}),", and ",(0,i.jsx)(t.code,{children:"key"})," fields\nupdated to point to the new client, server certs and key. Note that the key is auto-generated when creating the certs."]}),"\n",(0,i.jsx)(t.p,{children:"Now, restart the controller and double check to ensure the certificates are now valid."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var r=n(96540);const i={},s=r.createContext(i);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);