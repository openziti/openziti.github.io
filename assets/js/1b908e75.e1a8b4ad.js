"use strict";(self.webpackChunkdocusaurus_3=self.webpackChunkdocusaurus_3||[]).push([[7772],{53403:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"guides/external-auth/index","title":"External Authentication","description":"OpenZiti external jwt signers are intended to be used with various external providers. Arguably, the most common type of","source":"@site/docs/guides/external-auth/index.md","sourceDirName":"guides/external-auth","slug":"/guides/external-auth/","permalink":"/docs/guides/external-auth/","draft":false,"unlisted":false,"editUrl":"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/guides/external-auth/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Expired Certs","permalink":"/docs/guides/troubleshooting/pki-troubleshooting/troubleshoot-expired-certs"},"next":{"title":"Code Block Formatting Demo","permalink":"/docs/guides/external-auth/formatting-demo"}}');var i=t(74848),o=t(28453);const a={},s="External Authentication",l={},c=[{value:"Authentication Policies",id:"authentication-policies",level:2},{value:"Configuring the Controller With an External JWT Signer for OIDC",id:"configuring-the-controller-with-an-external-jwt-signer-for-oidc",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"external-authentication",children:"External Authentication"})}),"\n",(0,i.jsx)(n.p,{children:"OpenZiti external jwt signers are intended to be used with various external providers. Arguably, the most common type of\r\nprovider are external authorization servers, often referred to as IdPs. This guide will focus on this kind of external\r\nprovider and will focus on one authorization flow in particular:  Authorization Code Flow with PKCE."}),"\n",(0,i.jsxs)(n.p,{children:["OpenZiti can be configured to delegate authentication to external providers using\r\n",(0,i.jsx)(n.a,{href:"/docs/learn/core-concepts/security/authentication/external-jwt-signers",children:"external jwt signers"}),". Configuring\r\nOpenZiti to use external providers can be simple, however if you're new to the concepts (specifically the\r\n",(0,i.jsx)(n.a,{href:"https://www.rfc-editor.org/rfc/rfc7636",children:"Proof Key for Code Exchange flow"}),") it may be tricky to setup. There are\r\nnumerous excellent resources on the internet to learn more about OIDC, OAuth, and the PKCE flow if you need or want to\r\nlearn more."]}),"\n",(0,i.jsx)(n.p,{children:"The guides provided here are meant to get you up and running quickly and guide you through configuring the OpenZiti\r\nController to allow clients such as OpenZiti tunnelers to delegate authentication to a centralized provider."}),"\n",(0,i.jsx)(n.h2,{id:"authentication-policies",children:"Authentication Policies"}),"\n",(0,i.jsx)(n.p,{children:"The OpenZiti Controller will come with a default authorization policy that allows for all primary authentication\r\nmethods: username/password, certificate-based, exteral-jwt-signer. If you are familiar with OpenZiti concepts,\r\nadditional auth-policies can be created and the default policy modified. If you are new to OpenZiti, it's recommended\r\nyou leave the default [authentication policy](../..\r\n/learn/core-concepts/security/authentication/30-authentication-policies.md) intact."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:'It\'s often useful to use certificate-based authentication (the "normal", one-time-token enrollment) along with\r\nan external provider providing a strong two-factor authentication scheme. This would ensure the device in use is\r\ntrusted and would ensure a trusted human is using the device: human + device.'})}),"\n",(0,i.jsx)(n.h2,{id:"configuring-the-controller-with-an-external-jwt-signer-for-oidc",children:"Configuring the Controller With an External JWT Signer for OIDC"}),"\n",(0,i.jsxs)(n.p,{children:["Correctly configuring an external JWT signer for use with OIDC requires a few key fields to be supplied. Most of\r\nthese fields are discoverable using the openid discovery endpoint. Generally, this will be a URl accessible by\r\nadding ",(0,i.jsx)(n.code,{children:"./.well-known/openid-discovery"})," to your identity provider issuer URL. For example, if you were using\r\nKeycloak as your authorization provider of choice, you might have a Keycloak realm at\r\n",(0,i.jsx)(n.a,{href:"https://my.keycloak.openzitiio/realms/example",children:"https://my.keycloak.openzitiio/realms/example"}),". If that were the case, the openid discovery endpoint would be located at\r\n",(0,i.jsx)(n.a,{href:"https://my.keycloak.openzitiio/realms/example/.well-known/openid-configuration",children:"https://my.keycloak.openzitiio/realms/example/.well-known/openid-configuration"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Using the ",(0,i.jsx)(n.code,{children:".well-known/openid-configuration"})," will get much of the information required to successfully configure the\r\ncontroller with an ext-jwt-signer for OIDC authentication. From this url, gather the following pieces of information:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"issuer"}),"\n",(0,i.jsx)(n.li,{}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"CVE"}),(0,i.jsx)(n.th,{children:"Advisory"}),(0,i.jsx)(n.th,{children:"Notice"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"cve-1-here"}),(0,i.jsx)(n.td,{children:"30"}),(0,i.jsx)(n.td,{children:"New York"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bob"}),(0,i.jsx)(n.td,{children:"25"}),(0,i.jsx)(n.td,{children:"San Francisco"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- CVE: cve-1-here\r\n  Advisory: 30\r\n  Notice: New York\r\n- CVE: Bob\r\n  Advisory: 25  \r\n  Notice: San Francisco\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-code",children:"description: desc\r\n---\r\ncommand: ls -l\r\n---\r\nresults:\r\nhere are the results\r\nthey could be super long\r\n\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-code",children:"description: This command lists all files in the current directory.\r\ncommand: ls -la\r\nresults: total 12\r\ndrwxr-xr-x  5 user staff 160 Jan 28 12:34 .\r\ndrwxr-xr-x 20 user staff 640 Jan 28 12:34 ..\r\n-rw-r--r--  1 user staff   0 Jan 28 12:34 file.txt\n"})}),"\n",(0,i.jsx)(n.p,{children:"a"})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(96540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);