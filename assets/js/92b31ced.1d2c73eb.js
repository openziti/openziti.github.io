"use strict";(self.webpackChunkdocusaurus_3=self.webpackChunkdocusaurus_3||[]).push([[9880],{22962:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>j,frontMatter:()=>c,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"guides/deployments/kubernetes/kubernetes-controller","title":"Install the Controller in Kubernetes","description":"","source":"@site/docs/guides/deployments/30-kubernetes/kubernetes-controller.mdx","sourceDirName":"guides/deployments/30-kubernetes","slug":"/guides/deployments/kubernetes/kubernetes-controller","permalink":"/docs/guides/deployments/kubernetes/kubernetes-controller","draft":false,"unlisted":false,"editUrl":"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/guides/deployments/30-kubernetes/kubernetes-controller.mdx","tags":[],"version":"current","lastUpdatedAt":1751306929000,"sidebarPosition":10,"frontMatter":{"sidebar_position":10,"sidebar_label":"Controller","title":"Install the Controller in Kubernetes"},"sidebar":"docsSidebar","previous":{"title":"Kubernetes","permalink":"/docs/category/kubernetes"},"next":{"title":"Router","permalink":"/docs/guides/deployments/kubernetes/kubernetes-router"}}');var n=r(74848),i=r(28453);function d(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"ziti-controller",children:"ziti-controller"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.img,{src:"https://img.shields.io/badge/Version-2.0.1-informational?style=flat-square",alt:"Version: 2.0.1"})," ",(0,n.jsx)(t.img,{src:"https://img.shields.io/badge/Type-application-informational?style=flat-square",alt:"Type: application"})," ",(0,n.jsx)(t.img,{src:"https://img.shields.io/badge/AppVersion-1.6.5-informational?style=flat-square",alt:"AppVersion: 1.6.5"})]}),"\n",(0,n.jsx)(t.p,{children:"Host an OpenZiti controller in Kubernetes"}),"\n",(0,n.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,n.jsx)(t.p,{children:"Add the OpenZiti Charts Repo with Helm."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"helm repo add openziti https://docs.openziti.io/helm-charts/\n"})}),"\n",(0,n.jsx)(t.p,{children:"This chart runs a Ziti controller in Kubernetes."}),"\n",(0,n.jsx)(t.h3,{id:"mutual-tls",children:"Mutual TLS"}),"\n",(0,n.jsx)(t.p,{children:"Ziti's TLS server ports must be published with a TLS passthrough to allow the controller to validate the client certificates from routers and identities. This may be done with a Traefik IngressRouteTCP, Gateway API TLSRoute, Ingress, NodePort, LoadBalancer, etc. The ctrl plane and management API share the client API's TLS listener by default, so there's one TCP port by default that must be published with TLS passthrough enabled."}),"\n",(0,n.jsx)(t.h3,{id:"certificates",children:"Certificates"}),"\n",(0,n.jsxs)(t.p,{children:["It is not normally necessary to obtain publicly trusted certificates for Ziti's TLS servers. Ziti manages the trust relationships between the controller and routers and clients independent of the web's root authorities. See the ",(0,n.jsx)(t.a,{href:"#alternative-web-server-certificates",children:"Alternative Web Server Certificates"})," section for more information."]}),"\n",(0,n.jsx)(t.h3,{id:"deployment",children:"Deployment"}),"\n",(0,n.jsx)(t.p,{children:"The deployment must have exactly one replica."}),"\n",(0,n.jsx)(t.h3,{id:"custom-resources",children:"Custom Resources"}),"\n",(0,n.jsxs)(t.p,{children:["This chart requires the custom resources provided by ",(0,n.jsx)(t.a,{href:"https://cert-manager.io/docs/installation/",children:"cert-manager"})," and ",(0,n.jsx)(t.a,{href:"https://cert-manager.io/docs/projects/trust-manager/#installation",children:"trust-manager"}),", i.e., Issuer, Certificate, and Bundle. It is a limitation of Trust Manager to have one instance per cluster and one namespace from which trust Bundle inputs may be sourced, so a single Ziti controller may occupy the cluster unless your use case allows for controllers from multiple networks to share a namespace. You must set the Trust Manager's \"trust namespace\" to the namespace of the Ziti controller so that it will be able to compose a trust Bundle resource from Ziti's root CA cert(s)."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"helm repo add jetstack https://charts.jetstack.io\n\nhelm upgrade --install cert-manager jetstack/cert-manager \\\n    --namespace cert-manager --create-namespace \\\n    --set crds.enabled=true\n\nkubectl create namespace ziti\nhelm upgrade --install trust-manager jetstack/trust-manager \\\n    --namespace cert-manager \\\n    --set crds.keep=false \\\n    --set app.trust.namespace=ziti\n"})}),"\n",(0,n.jsx)(t.h3,{id:"breaking-change",children:"Breaking Change"}),"\n",(0,n.jsx)(t.p,{children:"Version 2 of this chart introduces a breaking change. You must decouple cert-manager and trust-manager from the Ziti controller chart if they were previously installed as subcharts. This allows them to be upgraded and configured independently of the Ziti controller chart."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Symptom"})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:'Error: Unable to continue with install: CustomResourceDefinition "certificaterequests.cert-manager.io" in namespace "" exists and cannot be imported into the current release: invalid ownership metadata; label validation error: missing key "app.kubernetes.io/managed-by": must be set to "Helm"; annotation validation error: missing key "meta.helm.sh/release-name": must be set to "cert-manager"; annotation validation error: missing key "meta.helm.sh/release-namespace": must be set to "cert-manager"'}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Cause"})}),"\n",(0,n.jsx)(t.p,{children:"Cert Manager and Trust Manager are no longer included as subcharts, so upgrading the Ziti controller chart will delete the cert-manager and trust-manager Operators along with their respective CRDs and associated resources which are critical for the Ziti controller."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Solution"})}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"As with any controller upgrade, you are advised to back up the database before proceeding so that you will have the option to roll back to a snapshot prior to any irreversible database schema migrations that may occur during an upgrade."}),"\n",(0,n.jsx)(t.li,{children:"Upgrade the Ziti controller Helm release to chart v2. This will temporarily uninstall the CM and TM Helm releases if they were originally installed as dependencies of the Ziti controller chart."}),"\n",(0,n.jsxs)(t.li,{children:["Install or upgrade as desired the cert-manager and trust-manager Helm releases (see ",(0,n.jsx)(t.a,{href:"#custom-resources",children:"Custom Resources"})," section above for an example that is compatible with this upgrade path)."]}),"\n",(0,n.jsxs)(t.li,{children:['If the cert-manager or trust-manager charts fail to install with the "symptom" above, then run the provided BASH script (',(0,n.jsx)(t.code,{children:"chown-cert-manager.bash"}),") to set the owner labels and annotations on existing cert-manager and trust-manager CRDs and resources."]}),"\n",(0,n.jsx)(t.li,{children:"Retry installing cert-manager and trust-manager Helm charts. When they are installed successfully, their respective Helm releases will own the CRDs that were annotated and labeled by the provided BASH script."}),"\n"]}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsx)(t.p,{children:"You must use the same values for CM and TM Helm release names and namespaces when you run the provided script and when you re-install the cert-manager and trust-manager Helm charts."})}),"\n",(0,n.jsx)(t.p,{children:'Assuming your future CM release will be named "cert-manager," your future TM release will be named "trust-manager," and both will be installed in namespace "cert-manager," and your Ziti controller is installed in namespace "ziti," you can use these example values to run the provided script to pave the way to installing the version 2 ziti-controller chart, which will delete the cert-manager and trust-manager Operators, preserving the CRDs and their associated resources.'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"helm pull openziti/ziti-controller\ntar -xvf ziti-controller-*.tgz\nCM_NAMESPACE=cert-manager \\\nCM_RELEASE_NAME=cert-manager \\\nTM_NAMESPACE=cert-manager \\\nTM_RELEASE_NAME=trust-manager \\\nZITI_NAMESPACE=ziti \\\n./ziti-controller/files/chown-cert-manager.bash\n"})}),"\n",(0,n.jsx)(t.h2,{id:"nodeport-service-example",children:"NodePort Service Example"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Value"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.advertisedHost"}),(0,n.jsx)(t.td,{children:"the address that clients and routers will use to reach this controller"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.advertisedPort"}),(0,n.jsx)(t.td,{children:"the TCP port associated with the advertisedHost"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.service.type"}),(0,n.jsx)(t.td,{children:"the service type for the client API and router control plane"})]})]})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"helm upgrade ziti-controller openziti/ziti-controller \\\n    --install \\\n    --namespace ziti \\\n    --create-namespace \\\n    --set clientApi.advertisedHost=ctrl1.ziti.example.com \\\n    --set clientApi.advertisedPort=32171 \\\n    --set clientApi.service.type=NodePort\n"})}),"\n",(0,n.jsx)(t.p,{children:"Here's the YAML representation of the same set of input values."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"clientApi:\n    advertisedHost: ctrl1.ziti.example.com\n    advertisedPort: 32171\n    service:\n        type: NodePort\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Visit the Ziti Administration Console (ZAC): ",(0,n.jsx)(t.a,{href:"https://ctrl1.ziti.example.com:32171/zac/",children:"https://ctrl1.ziti.example.com:32171/zac/"})]}),"\n",(0,n.jsxs)(t.p,{children:["Log in with the ",(0,n.jsx)(t.code,{children:"ziti"})," CLI."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"ziti edge login ctrl1.ziti.example.com:32171 --yes --username admin --password $(\n    kubectl -n ziti get secrets ziti-controller-admin-secret -o go-template='{{index .data \"admin-password\" | base64decode }}'\n)\n"})}),"\n",(0,n.jsx)(t.h2,{id:"nginx-ingress-example",children:"Nginx Ingress Example"}),"\n",(0,n.jsxs)(t.p,{children:["Here's an example of using ",(0,n.jsxs)(t.a,{href:"https://docs.nginx.com/nginx-ingress-controller/installation/installing-nic/installation-with-helm/",children:["the community ",(0,n.jsx)(t.code,{children:"ingress-nginx"})," chart"]})," to provision ingresses for the controller's ",(0,n.jsx)(t.code,{children:"ClusterIP"})," services."]}),"\n",(0,n.jsxs)(t.p,{children:["Ensure you have the ",(0,n.jsx)(t.code,{children:"ingress-nginx"})," chart installed with ",(0,n.jsx)(t.code,{children:"controller.extraArgs.enable-ssl-passthrough=true"}),". You can verify this feature is enabled by running ",(0,n.jsx)(t.code,{children:"kubectl describe pods {ingress-nginx-controller pod}"})," and checking the args for ",(0,n.jsx)(t.code,{children:"--enable-ssl-passthrough=true"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["If necessary, patch the ",(0,n.jsx)(t.code,{children:"ingress-nginx"})," deployment to enable TLS passthrough."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:'kubectl patch deployment "ingress-nginx-controller" \\\n    --namespace ingress-nginx \\\n    --type json \\\n    --patch \'[{"op": "add",\n        "path": "/spec/template/spec/containers/0/args/-",\n        "value":"--enable-ssl-passthrough"\n    }]\'\n'})}),"\n",(0,n.jsx)(t.p,{children:"Create a Helm chart values file like this."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'# ziti-controller-values.yml\nclientApi:\n    advertisedHost: ctrl1.ziti.example.com\n    advertisedPort: 443\n    service:\n        type: ClusterIP\n    ingress:\n        enabled: true\n        ingressClassName: nginx\n        annotations:\n            kubernetes.io/ingress.allow-http: "false"\n            nginx.ingress.kubernetes.io/ssl-passthrough: "true"\n'})}),"\n",(0,n.jsx)(t.p,{children:"Now install or upgrade this controller chart with your values file."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"helm upgrade ziti-controller openziti/ziti-controller \\\n    --install \\\n    --namespace ziti \\\n    --values ziti-controller-values.yml\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Visit the Ziti Administration Console (ZAC): ",(0,n.jsx)(t.a,{href:"https://ctrl1.ziti.example.com/zac/",children:"https://ctrl1.ziti.example.com/zac/"})]}),"\n",(0,n.jsxs)(t.p,{children:["Log in with the ",(0,n.jsx)(t.code,{children:"ziti"})," CLI."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"ziti edge login ctrl1.ziti.example.com:443 --yes --username admin --password $(\n    kubectl -n ziti get secrets ziti-controller-admin-secret -o go-template='{{index .data \"admin-password\" | base64decode }}'\n)\n"})}),"\n",(0,n.jsx)(t.h2,{id:"traefik-ingressroutetcp-example",children:"Traefik IngressRouteTCP Example"}),"\n",(0,n.jsx)(t.p,{children:"This will create a Traefik IngressRouteTCP with TLS passthrough for the client API's ClusterIP service."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"helm upgrade ziti-controller openziti/ziti-controller \\\n    --install \\\n    --namespace ziti \\\n    --create-namespace \\\n    --set clientApi.advertisedHost=ctrl1.ziti.example.com \\\n    --set clientApi.advertisedPort=443 \\\n    --set clientApi.service.type=ClusterIP \\\n    --set clientApi.traefikTcpRoute.enabled=true\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Visit the Ziti Administration Console (ZAC): ",(0,n.jsx)(t.a,{href:"https://ctrl1.ziti.example.com/zac/",children:"https://ctrl1.ziti.example.com/zac/"})]}),"\n",(0,n.jsxs)(t.p,{children:["Log in with the ",(0,n.jsx)(t.code,{children:"ziti"})," CLI."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"ziti edge login ctrl1.ziti.example.com:443 --yes --username admin --password $(\n    kubectl -n ziti get secrets ziti-controller-admin-secret -o go-template='{{index .data \"admin-password\" | base64decode }}'\n)\n"})}),"\n",(0,n.jsx)(t.h2,{id:"admin-user-and-password",children:"Admin User and Password"}),"\n",(0,n.jsx)(t.p,{children:"A default admin user and password will be generated and saved to a secret during installation. The credentials can be retrieved using this command."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:'kubectl get secret \\\n    -n ziti ziti-controller-admin-secret \\\n    -o go-template=\'{{range $k,$v := .data}}{{printf "%s: " $k}}{{if not $v}}{{$v}}{{else}}{{$v | base64decode}}{{end}}{{"\\n"}}{{end}}\'\n'})}),"\n",(0,n.jsx)(t.h2,{id:"extra-security-for-the-management-api",children:"Extra Security for the Management API"}),"\n",(0,n.jsxs)(t.p,{children:["You can split the client and management APIs into separate cluster services by setting ",(0,n.jsx)(t.code,{children:"managementApi.service.enabled=true"}),". With this configuration, you'll have an additional cluster service named ",(0,n.jsx)(t.code,{children:"{release}-mgmt"})," that is the management API, and the client API will not have management features."]}),"\n",(0,n.jsxs)(t.p,{children:["This Helm chart's values allow for both operational scenarios: combined and split. The default choice is to expose the combined client and management APIs as the cluster service named ",(0,n.jsx)(t.code,{children:"{release}-client"}),", which is convenient because you can use the ",(0,n.jsx)(t.code,{children:"ziti"})," CLI immediately. For additional security, you may shelter the management API by splitting these two sets of features, exposing them as separate API servers. After the split, you can access the management API in several ways:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["deploy a tunneler to bind a Ziti service targeting ",(0,n.jsx)(t.code,{children:"{release}-mgmt.{namespace}.svc:{port}"}),"."]}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"kubectl -n {namespace} port-forward deployments/{release}-mgmt 8443:{port}"})}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["The web console (ZAC) is always bound to the same web listener as the management API, so you can access it at that ",(0,n.jsx)(t.code,{children:"/zac/"})," path on the same URL."]}),"\n",(0,n.jsx)(t.h2,{id:"advanced-pki",children:"Advanced PKI"}),"\n",(0,n.jsx)(t.p,{children:"The default configuration generates a singular PKI root of trust for all the controller's servers and the edge signer CA. Optionally, you may provide the name of a cert-manager Issuer or ClusterIssuer to become the root of trust for the Ziti controller's identity."}),"\n",(0,n.jsx)(t.p,{children:"Merge this with your Helm chart values file before installing or upgrading."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"ctrlPlane:\n    issuer:\n        kind: ClusterIssuer\n        name: my-alternative-cluster-issuer\n"})}),"\n",(0,n.jsx)(t.p,{children:"You may also configure the Ziti controller to use separate PKI roots of trust for its three main identities: control plane, edge signer, and web bindings."}),"\n",(0,n.jsx)(t.p,{children:"For example, to use a separate CA for the edge signer function, merge this with your Helm chart values file before installing or upgrading."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"edgeSignerPki:\n    enabled: true\n"})}),"\n",(0,n.jsx)(t.h2,{id:"prometheus-monitoring",children:"Prometheus Monitoring"}),"\n",(0,n.jsxs)(t.p,{children:["This chart provides a default disabled ",(0,n.jsx)(t.code,{children:"ziti-controller-prometheus"})," k8s service for prometheus,\nwhich can be enabled with ",(0,n.jsx)(t.code,{children:"prometheus.service.enabled"}),". Enabling it will create a prometheus ServiceMonitor\nfor configuring the prometheus endpoint. It is also important that you enable\n",(0,n.jsx)(t.code,{children:"fabric.events.enabled"})," for getting a full set of metrics."]}),"\n",(0,n.jsxs)(t.p,{children:["For more information, please check ",(0,n.jsx)(t.a,{href:"https://openziti.io/docs/learn/core-concepts/metrics/prometheus/",children:"here"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"values-reference",children:"Values Reference"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Key"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Default"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"additionalConfigs"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'{"ctrl":{},"events":{},"healthChecks":{},"network":{},"web":{}}'})}),(0,n.jsx)(t.td,{children:"Append additional config blocks in specific top-level keys: edge, web, network, ctrl. If events are defined here, they replace the default events section entirely."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"additionalVolumes"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"[]"})}),(0,n.jsx)(t.td,{children:"additional volumes to mount to ziti-controller container"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"affinity"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"deployment template spec affinity"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ca.clusterDomain"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"cluster.local"'})}),(0,n.jsx)(t.td,{children:"Set a custom cluster domain if other than cluster.local"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ca.duration"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"87840h"'})}),(0,n.jsx)(t.td,{children:"Go time.Duration string format"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ca.renewBefore"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"720h"'})}),(0,n.jsx)(t.td,{children:"Go time.Duration string format"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cert.duration"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"87840h"'})}),(0,n.jsx)(t.td,{children:"server certificate duration as Go time.Duration string format"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cert.renewBefore"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"720h"'})}),(0,n.jsx)(t.td,{children:"rewnew server certificates before expiry as Go time.Duration string format"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.advertisedHost"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'""'})}),(0,n.jsx)(t.td,{children:"global DNS name by which routers can resolve a reachable IP for this service"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.advertisedPort"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"443"})}),(0,n.jsx)(t.td,{children:"cluster service, node port, load balancer, and ingress port"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.altDnsNames"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"[]"})}),(0,n.jsx)(t.td,{children:"besides advertisedHost and dnsNames, add these DNS SANs to any ingresses but not the web identity"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.containerPort"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"1280"})}),(0,n.jsx)(t.td,{children:"cluster service target port on the container"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.dnsNames"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"[]"})}),(0,n.jsx)(t.td,{children:"besides advertisedHost, add these DNS SANs to the web identity and any ingresses"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.ingress.annotations"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"ingress annotations, e.g., to configure ingress-nginx"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.ingress.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{children:"create a TLS-passthrough ingress for the client API's ClusterIP service"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.ingress.ingressClassName"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'""'})}),(0,n.jsx)(t.td,{children:'ingress class name, e.g., "nginx"'})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.ingress.labels"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"ingress labels"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.ingress.tls"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"deprecated: tls passthrough is required"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.service.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"true"})}),(0,n.jsx)(t.td,{children:"create a cluster service for the deployment"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.service.type"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"LoadBalancer"'})}),(0,n.jsx)(t.td,{children:"expose the service as a ClusterIP, NodePort, or LoadBalancer"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.traefikTcpRoute.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{children:"enable Traefik IngressRouteTCP"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.traefikTcpRoute.entryPoints"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'["websecure"]'})}),(0,n.jsx)(t.td,{children:"IngressRouteTCP entrypoints"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"clientApi.traefikTcpRoute.labels"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"IngressRouteTCP labels"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"consoleAltIngress"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"override the address printed in Helm release notes if you configured an alternative DNS SAN for the console"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.advertisedHost"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"{{ .Values.clientApi.advertisedHost }}"'})}),(0,n.jsx)(t.td,{children:"global DNS name by which routers can resolve a reachable IP for this service: default is cluster service DNS name which assumes all routers are inside the same cluster"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.advertisedPort"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"{{ .Values.clientApi.advertisedPort }}"'})}),(0,n.jsx)(t.td,{children:"cluster service, node port, load balancer, and ingress port"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.alternativeIssuer"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"obtain the ctrl plane identity from an existing issuer instead of generating a new PKI"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.containerPort"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"{{ .Values.clientApi.containerPort }}"'})}),(0,n.jsx)(t.td,{children:"cluster service target port on the container"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.dnsNames"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"[]"})}),(0,n.jsx)(t.td,{children:"besides advertisedHost, add these DNS SANs to the ctrl plane identity and any ctrl plane ingresses"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.ingress.annotations"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"ingress annotations, e.g., to configure ingress-nginx"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.ingress.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{children:"create an ingress for the cluster service"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.ingress.ingressClassName"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'""'})}),(0,n.jsx)(t.td,{children:'ingress class name, e.g., "nginx"'})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.ingress.labels"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"ingress labels"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.ingress.tls"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"deprecated: tls passthrough is required"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.service.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{children:"create a separate cluster service for the ctrl plane; enabling this requires you to also set the host and port for a separate ctrl plane TLS listener"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.service.type"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"ClusterIP"'})}),(0,n.jsx)(t.td,{children:"expose the service as a ClusterIP, NodePort, or LoadBalancer"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.traefikTcpRoute.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{children:"enable Traefik IngressRouteTCP"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.traefikTcpRoute.entryPoints"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'["websecure"]'})}),(0,n.jsx)(t.td,{children:"IngressRouteTCP entrypoints"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlane.traefikTcpRoute.labels"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"IngressRouteTCP labels"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ctrlPlaneCasBundle.namespaceSelector"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"namespaces where trust-manager will create the Bundle resource containing Ziti's trusted CA certs (default: empty means all namespaces)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"customAdminSecretName"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'""'})}),(0,n.jsx)(t.td,{children:"set the admin user and password from a custom secret The custom admin secret must be of the following format: apiVersion: v1 kind: Secret metadata:   name: myCustomAdminSecret type: Opaque data:   admin-user:   admin-password:"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"dbFile"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"ctrl.db"'})}),(0,n.jsx)(t.td,{children:"name of the BoltDB file"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"edgeSignerPki.admin_client_cert"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'{"duration":"8760h","enabled":false,"renewBefore":"720h"}'})}),(0,n.jsx)(t.td,{children:"metadata name of the alternative issuer name:"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"edgeSignerPki.admin_client_cert.duration"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"8760h"'})}),(0,n.jsx)(t.td,{children:"admin client certificate duration as Go time.Duration"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"edgeSignerPki.admin_client_cert.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{children:"create a client certificate for the admin user"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"edgeSignerPki.admin_client_cert.renewBefore"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"720h"'})}),(0,n.jsx)(t.td,{children:"renew admin client certificate before expiry as Go time.Duration"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"edgeSignerPki.alternativeIssuer"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"obtain the edge signer intermediate CA from an existing issuer instead of generating a new PKI"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"edgeSignerPki.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"true"})}),(0,n.jsx)(t.td,{children:"generate a separate PKI root of trust for the edge signer CA"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"env"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"set name to value in containers' environment"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"envSecrets"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"set secrets as environment variables in the container"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{children:"enable fabric event logger and file handler"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.fileName"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"fabric-events.json"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.mountDir"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"/var/run/ziti"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.network.intervalAgeThreshold"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"5s"'})}),(0,n.jsx)(t.td,{children:"matching interval age and reporting interval ensures coherent metrics from fabric events"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.network.metricsReportInterval"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"5s"'})}),(0,n.jsx)(t.td,{children:"matching interval age and reporting interval ensures coherent metrics from fabric events"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.subscriptions[0].type"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"fabric.circuits"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.subscriptions[1].type"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"fabric.links"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.subscriptions[2].type"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"fabric.routers"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.subscriptions[3].type"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"fabric.terminators"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.subscriptions[4].metricFilter"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'".*"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.subscriptions[4].sourceFilter"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'".*"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.subscriptions[4].type"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"metrics"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.subscriptions[5].type"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"edge.sessions"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.subscriptions[6].type"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"edge.apiSessions"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.subscriptions[7].type"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"fabric.usage"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.subscriptions[7].version"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"3"})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.subscriptions[8].type"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"services"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.subscriptions[9].interval"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"5s"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"fabric.events.subscriptions[9].type"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"edge.entityCounts"'})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"highAvailability.mode"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"standalone"'})}),(0,n.jsx)(t.td,{children:"Ziti controller HA mode"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"highAvailability.replicas"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"1"})}),(0,n.jsx)(t.td,{children:"Ziti controller HA swarm replicas"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"image.additionalArgs"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"[]"})}),(0,n.jsx)(t.td,{children:"additional arguments can be passed directly to the container to modify ziti runtime arguments"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"image.args"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'["{{ include \\"configMountDir\\" . }}/ziti-controller.yaml"]'})}),(0,n.jsx)(t.td,{children:"args for the entrypoint command"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"image.command"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'["ziti","controller","run"]'})}),(0,n.jsx)(t.td,{children:"container entrypoint command"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"image.homeDir"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"/home/ziggy"'})}),(0,n.jsx)(t.td,{children:"homeDir for admin login shell must align with container image's ~/.bashrc for ziti CLI auto-complete to work"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"image.pullPolicy"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"IfNotPresent"'})}),(0,n.jsx)(t.td,{children:"deployment image pull policy"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"image.repository"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"docker.io/openziti/ziti-controller"'})}),(0,n.jsx)(t.td,{children:"container image repository for app deployment"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"image.tag"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'""'})}),(0,n.jsx)(t.td,{children:"override the container image tag specified in the chart"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'{"advertisedHost":"{{ .Values.clientApi.advertisedHost }}","advertisedPort":"{{ .Values.clientApi.advertisedPort }}","altDnsNames":[],"containerPort":1281,"dnsNames":[],"ingress":{"annotations":{},"enabled":false,"ingressClassName":"","labels":{},"tls":{}},"service":{"enabled":false,"type":"ClusterIP"},"traefikTcpRoute":{"enabled":false,"entryPoints":["websecure"],"labels":{}}}'})}),(0,n.jsx)(t.td,{children:"by default, there's no need for a separate cluster service, ingress, or load balancer for the management API because it shares a TLS listener with the client API, and is reachable at the same address and presents the same web identity cert; you may configure a separate service, ingress, load balancer, etc.  for the management API by setting managementApi.service.enabled=true"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.advertisedHost"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"{{ .Values.clientApi.advertisedHost }}"'})}),(0,n.jsx)(t.td,{children:"global DNS name by which routers can resolve a reachable IP for this service"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.advertisedPort"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"{{ .Values.clientApi.advertisedPort }}"'})}),(0,n.jsx)(t.td,{children:"cluster service, node port, load balancer, and ingress port"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.altDnsNames"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"[]"})}),(0,n.jsx)(t.td,{children:"besides advertisedHost and dnsNames, add these DNS SANs to any mgmt api ingresses, but not the web identity"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.containerPort"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"1281"})}),(0,n.jsx)(t.td,{children:"cluster service target port on the container"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.dnsNames"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"[]"})}),(0,n.jsx)(t.td,{children:"besides advertisedHost, add these DNS SANs to the web identity and any mgmt api ingresses"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.ingress.annotations"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"ingress annotations, e.g., to configure ingress-nginx"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.ingress.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{children:"create a TLS-passthrough ingress for the client API's ClusterIP service"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.ingress.ingressClassName"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'""'})}),(0,n.jsx)(t.td,{children:'ingress class name, e.g., "nginx"'})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.ingress.labels"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"ingress labels"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.ingress.tls"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"deprecated: tls passthrough is required"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.service.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{children:"create a cluster service for the deployment"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.service.type"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"ClusterIP"'})}),(0,n.jsx)(t.td,{children:"expose the service as a ClusterIP, NodePort, or LoadBalancer"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.traefikTcpRoute.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{children:"enable Traefik IngressRouteTCP"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.traefikTcpRoute.entryPoints"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'["websecure"]'})}),(0,n.jsx)(t.td,{children:"IngressRouteTCP entrypoints"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"managementApi.traefikTcpRoute.labels"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"IngressRouteTCP labels"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"network.createCircuitRetries"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"2"})}),(0,n.jsx)(t.td,{children:"createCircuitRetries controls the number of retries that will be attempted to create a path (and terminate it) for new circuits."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"network.cycleSeconds"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"15"})}),(0,n.jsx)(t.td,{children:"Defines the period that the controller re-evaluates the performance of all of the circuits running on the network."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"network.initialLinkLatency"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"65s"'})}),(0,n.jsx)(t.td,{children:"Sets the latency of link when it's first created. Will be overwritten as soon as latency from the link is actually reported from the routers. Defaults to 65 seconds."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"network.minRouterCost"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"10"})}),(0,n.jsx)(t.td,{children:"Sets router minimum cost. Defaults to 10"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"network.pendingLinkTimeoutSeconds"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"10"})}),(0,n.jsx)(t.td,{children:"pendingLinkTimeoutSeconds controls how long we'll wait before creating a new link between routers where there isn't an established link, but a link request has been sent"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"network.routeTimeoutSeconds"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"10"})}),(0,n.jsx)(t.td,{children:"routeTimeoutSeconds controls the number of seconds the controller will wait for a route attempt to succeed."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"network.routerConnectChurnLimit"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"1m"'})}),(0,n.jsx)(t.td,{children:"Sets how often a new control channel connection can take over for a router with an existing control channel connection Defaults to 1 minute"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"network.smart.rerouteCap"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"4"})}),(0,n.jsxs)(t.td,{children:["Defines the hard upper limit of underperforming circuits that are candidates to be re-routed. If smart routing detects 100 circuits that are underperforming, and ",(0,n.jsx)(t.code,{children:"smart.rerouteCap"})," is set to ",(0,n.jsx)(t.code,{children:"1"}),", and ",(0,n.jsx)(t.code,{children:"smart.rerouteFraction"})," is set to ",(0,n.jsx)(t.code,{children:"0.02"}),", then the upper limit of circuits that will be re-routed in this ",(0,n.jsx)(t.code,{children:"cycleSeconds"})," period will be limited to 1."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"network.smart.rerouteFraction"}),(0,n.jsx)(t.td,{children:"float"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"0.02"})}),(0,n.jsxs)(t.td,{children:["Defines the fractional upper limit of underperforming circuits that are candidates to be re-routed. If smart routing detects 100 circuits that are underperforming, and ",(0,n.jsx)(t.code,{children:"smart.rerouteFraction"})," is set to ",(0,n.jsx)(t.code,{children:"0.02"}),", then the upper limit of circuits that will be re-routed in this ",(0,n.jsx)(t.code,{children:"cycleSeconds"})," period will be limited to 2 (2% of 100)."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"nodeSelector"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"deployment template spec node selector"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"persistence.VolumeName"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'""'})}),(0,n.jsx)(t.td,{children:"PVC volume name"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"persistence.accessMode"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"ReadWriteOnce"'})}),(0,n.jsx)(t.td,{children:"PVC access mode: ReadWriteOnce (concurrent mounts not allowed), ReadWriteMany (concurrent allowed)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"persistence.annotations"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"annotations for the PVC"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"persistence.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"true"})}),(0,n.jsx)(t.td,{children:"required: place a storage claim for the BoltDB persistent volume"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"persistence.existingClaim"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'""'})}),(0,n.jsx)(t.td,{children:"A manually managed Persistent Volume and Claim Requires persistence.enabled=true. If defined, PVC must be created manually before volume will be bound."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"persistence.size"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"2Gi"'})}),(0,n.jsx)(t.td,{children:"2GiB is enough for tens of thousands of entities, but feel free to make it larger"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"persistence.storageClass"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'""'})}),(0,n.jsx)(t.td,{children:"Storage class of PV to bind. By default it looks for the default storage class. If the PV uses a different storage class, specify that here."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"podAnnotations"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"annotations to apply to all pods deployed by this chart"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"podSecurityContext"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'{"fsGroup":2171}'})}),(0,n.jsx)(t.td,{children:"deployment template spec security context"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"podSecurityContext.fsGroup"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"2171"})}),(0,n.jsx)(t.td,{children:"the GID of the group that should own any files created by the container, especially the BoltDB file"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.advertisedHost"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'""'})}),(0,n.jsx)(t.td,{children:"DNS name to advertise in place of the default internal cluster name built from the Helm release name"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.advertisedPort"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"443"})}),(0,n.jsx)(t.td,{children:"cluster service, node port, load balancer, and ingress port"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.containerPort"}),(0,n.jsx)(t.td,{children:"int"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"9090"})}),(0,n.jsx)(t.td,{children:"cluster service target port on the container"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.service.annotations"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.service.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{children:"create a cluster service for the deployment"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.service.labels"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'{"app":"prometheus"}'})}),(0,n.jsx)(t.td,{children:"extra labels for matching only this service, ie. serviceMonitor"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.service.type"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"ClusterIP"'})}),(0,n.jsx)(t.td,{children:"expose the service as a ClusterIP, NodePort, or LoadBalancer"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.serviceMonitor.annotations"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"ServiceMonitor annotations"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.serviceMonitor.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"true"})}),(0,n.jsx)(t.td,{children:"If enabled, and prometheus service is enabled, ServiceMonitor resources for Prometheus Operator are created"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.serviceMonitor.interval"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"nil"})}),(0,n.jsx)(t.td,{children:"ServiceMonitor scrape interval"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.serviceMonitor.labels"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"Additional ServiceMonitor labels"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.serviceMonitor.metricRelabelings"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"[]"})}),(0,n.jsxs)(t.td,{children:["ServiceMonitor relabel configs to apply to samples as the last step before ingestion (",(0,n.jsx)(t.a,{href:"https://prometheus.io/docs/prometheus/latest/configuration/configuration",children:"reference"}),")"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.serviceMonitor.namespace"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"nil"})}),(0,n.jsx)(t.td,{children:"Alternative namespace for ServiceMonitor resources"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.serviceMonitor.namespaceSelector"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"Namespace selector for ServiceMonitor resources"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.serviceMonitor.relabelings"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"[]"})}),(0,n.jsxs)(t.td,{children:["ServiceMonitor relabel configs to apply to samples before scraping (defines ",(0,n.jsx)(t.code,{children:"relabel_configs"}),";  ",(0,n.jsx)(t.a,{href:"https://prometheus.io/docs/prometheus/latest/configuration/configuration",children:"reference"}),")"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.serviceMonitor.scheme"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"https"'})}),(0,n.jsx)(t.td,{children:"ServiceMonitor will use http by default, but you can pick https as well"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.serviceMonitor.scrapeTimeout"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"nil"})}),(0,n.jsx)(t.td,{children:"ServiceMonitor scrape timeout in Go duration format (e.g. 15s)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.serviceMonitor.targetLabels"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"[]"})}),(0,n.jsxs)(t.td,{children:["ServiceMonitor will add labels from the service to the Prometheus metric (",(0,n.jsx)(t.a,{href:"https://prometheus.io/docs/prometheus/latest/configuration/configuration",children:"reference"}),")"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.serviceMonitor.tlsConfig"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'{"insecureSkipVerify":true}'})}),(0,n.jsx)(t.td,{children:"ServiceMonitor will use these tlsConfig settings to make the health check requests"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"prometheus.serviceMonitor.tlsConfig.insecureSkipVerify"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"true"})}),(0,n.jsx)(t.td,{children:"set TLS skip verify, because the SAN will not match with the pod IP"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"resources"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"deployment container resources"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"securityContext"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"deployment container security context"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"spireAgent.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{children:"if you are running a container with the spire-agent binary installed then this will allow you to add the hostpath necessary for connecting to the spire socket"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"spireAgent.spireSocketMnt"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'"/run/spire/sockets"'})}),(0,n.jsx)(t.td,{children:"file path of the spire socket mount"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"tolerations"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"[]"})}),(0,n.jsx)(t.td,{children:"deployment template spec tolerations"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"trustDomain"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:'""'})}),(0,n.jsx)(t.td,{children:"permanent SPIFFE ID to use for this controller's trust domain (default: random, fixed for the life of the chart release)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"useCustomAdminSecret"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{children:"allow for using a custom admin secret, which has to be created beforehand if enabled, the admin secret will not be generated by this Helm chart"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"webBindingPki.altServerCerts"}),(0,n.jsx)(t.td,{children:"list"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"[]"})}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"webBindingPki.alternativeIssuer"}),(0,n.jsx)(t.td,{children:"object"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"{}"})}),(0,n.jsx)(t.td,{children:"obtain the web identity from an existing issuer instead of generating a new PKI"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"webBindingPki.enabled"}),(0,n.jsx)(t.td,{children:"bool"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"true"})}),(0,n.jsx)(t.td,{children:"generate a separate PKI root of trust for web bindings, i.e., client, management, and prometheus APIs"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"todos",children:"TODO's"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"High availability clustered mode"}),"\n",(0,n.jsxs)(t.li,{children:["Deploy Prometheus scraper configuration when ",(0,n.jsx)(t.code,{children:"prometheus.enabled = true"})]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"alternative-web-server-certificates",children:"Alternative Web Server Certificates"}),"\n",(0,n.jsxs)(t.p,{children:["The purpose of the ",(0,n.jsx)(t.code,{children:"alt_server_certs"})," feature is to bind a publicly trusted server certificate to the controller's web listener. This is useful for publishing the controller's client API with a different DNS name for BrowZer and console clients that must verify the controller's identity with their OS trusted root store."]}),"\n",(0,n.jsx)(t.h3,{id:"request-an-alternative-server-certificate-from-a-cert-manager-issuer",children:"Request an alternative server certificate from a cert-manager issuer"}),"\n",(0,n.jsx)(t.p,{children:'The most automatic way to bind an alt cert is the certManager mode provided by this chart. This example implies you have separately created a cert-manager ClusterIssuer named "cloudflare-dns01-issuer" that is able to obtain a certificate for the specified DNS name. If publishing the client API\'s alternative DNS name as a separate Ingress, you may reference that advertised host when requesting the alternative server certificate as shown here with an inline template to ensure they match.'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'clientApi:\n    advertisedHost: edge.ziti.example.com\n    ingress:\n        enabled: true\n        ingressClassName: nginx\n        annotations:\n            kubernetes.io/ingress.allow-http: "false"\n            nginx.ingress.kubernetes.io/ssl-passthrough: "true"\n    service:\n        enabled: true\n        type: ClusterIP\n    altDnsNames:\n        - "alt-edge.ziti.example.com"\n\nwebBindingPki:\n    enabled: true\n    altServerCerts:\n        - mode: certManager\n            secretName: my-alt-server-cert\n            dnsNames:\n                - "{{ .Values.clientApi.altDnsNames[0] }}"\n            issuerRef:\n                group: cert-manager.io\n                kind: ClusterIssuer\n                name: cloudflare-dns01-issuer\n            mountPath: /etc/ziti/alt-server-cert\n'})}),"\n",(0,n.jsx)(t.h3,{id:"use-an-alternative-certificate-and-key-from-a-tls-secret",children:"Use an alternative certificate and key from a tls secret"}),"\n",(0,n.jsx)(t.p,{children:"The alternative server certificate and key may also be provided from a Kubernetes TLS secret. Declare the tls secret in the additionalVolumes section and reference it in the altServerCerts section."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"additionalVolumes:\n    - name: my-alt-server-cert\n      volumeType: secret\n      mountPath: /etc/ziti/my-alt-server-cert\n      secretName: my-alt-server-cert\n\nwebBindingPki:\n    altServerCerts:\n        - mode: secret\n          secretName: my-alt-server-cert\n"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}const c={sidebar_position:10,sidebar_label:"Controller",title:"Install the Controller in Kubernetes"},a=void 0,o={},h=[{value:"Requirements",id:"requirements",level:2},{value:"Mutual TLS",id:"mutual-tls",level:3},{value:"Certificates",id:"certificates",level:3},{value:"Deployment",id:"deployment",level:3},{value:"Custom Resources",id:"custom-resources",level:3},{value:"Breaking Change",id:"breaking-change",level:3},{value:"NodePort Service Example",id:"nodeport-service-example",level:2},{value:"Nginx Ingress Example",id:"nginx-ingress-example",level:2},{value:"Traefik IngressRouteTCP Example",id:"traefik-ingressroutetcp-example",level:2},{value:"Admin User and Password",id:"admin-user-and-password",level:2},{value:"Extra Security for the Management API",id:"extra-security-for-the-management-api",level:2},{value:"Advanced PKI",id:"advanced-pki",level:2},{value:"Prometheus Monitoring",id:"prometheus-monitoring",level:2},{value:"Values Reference",id:"values-reference",level:2},{value:"TODO&#39;s",id:"todos",level:2},{value:"Alternative Web Server Certificates",id:"alternative-web-server-certificates",level:2},{value:"Request an alternative server certificate from a cert-manager issuer",id:"request-an-alternative-server-certificate-from-a-cert-manager-issuer",level:3},{value:"Use an alternative certificate and key from a tls secret",id:"use-an-alternative-certificate-and-key-from-a-tls-secret",level:3}];function x(e){return(0,n.jsx)(l,{})}function j(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(x,{...e})}):x()}},28453:(e,t,r)=>{r.d(t,{R:()=>d,x:()=>l});var s=r(96540);const n={},i=s.createContext(n);function d(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);