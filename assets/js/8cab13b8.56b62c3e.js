"use strict";(self.webpackChunkdocusaurus_3=self.webpackChunkdocusaurus_3||[]).push([[7675],{89862:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>h,metadata:()=>t,toc:()=>x});const t=JSON.parse('{"id":"reference/tunnelers/windows/add-ids/ext-providers/index","title":"External Providers","description":"The Ziti Desktop Edge for Windows (ZDEW) 2.5.2+ supports integrating with external identity providers such","source":"@site/docs/reference/tunnelers/02-windows/add-ids/ext-providers/index.mdx","sourceDirName":"reference/tunnelers/02-windows/add-ids/ext-providers","slug":"/reference/tunnelers/windows/add-ids/ext-providers/","permalink":"/docs/reference/tunnelers/windows/add-ids/ext-providers/","draft":false,"unlisted":false,"editUrl":"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/reference/tunnelers/02-windows/add-ids/ext-providers/index.mdx","tags":[],"version":"current","lastUpdatedAt":1751306929000,"frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Third-Party CA","permalink":"/docs/reference/tunnelers/windows/add-ids/third-party-ca"},"next":{"title":"By JWT","permalink":"/docs/reference/tunnelers/windows/add-ids/ext-providers/ext-jwt"}}');var r=i(74848),s=i(28453),d=(i(79662),i(84971));i(73150),i(61426);function a(e){const n={code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"configuring-external-auth-in-openziti",children:"Configuring External Auth in OpenZiti"}),"\n",(0,r.jsxs)(n.p,{children:["To configure an External Provider for use with an OpenZiti tunneler, create an ",(0,r.jsx)(n.code,{children:"ext-jwt-signer"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This can be accomplished using the ",(0,r.jsx)(n.code,{children:"ziti"})," CLI or through the Ziti Admin Console (ZAC). Properly configuring the external\r\njwt signer will require careful attention, as even one stray character can prevent authentication from working. It is\r\nvery easy to add an extra slash or remove an important slash. Remember, the fields all must match exactly or authentication\r\nwill fail."]}),"\n",(0,r.jsx)(n.p,{children:"The following fields are used creating an external JWT signer:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"issuer - the issuer (iss) to expect"}),"\n",(0,r.jsxs)(n.li,{children:["audience - the audience (aud) the JWT is expected to be for, for example: ",(0,r.jsx)(n.code,{children:"openziti"})]}),"\n",(0,r.jsx)(n.li,{children:"client-id - a string assigned by the provider, used when performing the Auth Flow with PKCE process"}),"\n",(0,r.jsx)(n.li,{children:"jwks-endpoint - a URL used by the OpenZiti Controller to verify the provided JWT"}),"\n",(0,r.jsxs)(n.li,{children:["claims-property to match (often ",(0,r.jsx)(n.code,{children:"email"}),"). The JWT must contain a claim with the provided value"]}),"\n",(0,r.jsxs)(n.li,{children:["scopes - additional scopes to request from the provider. Often ",(0,r.jsx)(n.code,{children:"email"})," or ",(0,r.jsx)(n.code,{children:"profile"})]}),"\n",(0,r.jsx)(n.li,{children:"external-auth-url - the URL users are directed to for authentication with the external provider"}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}function o(e){const n={code:"code",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"a-practical-example",children:"A Practical Example"}),"\n",(0,r.jsx)(n.p,{children:"Locate the provider's OpenID discovery endpoint. For example, for Keycloak, the OpenID discovery endpoint is generally\r\nlocated at:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"https://${keycloak.domain.name}:${keycloak.port}/realms/${realm-name}/.well-known/openid-configuration\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The OpenID discovery endpoint returns three important fields necessary for the ",(0,r.jsx)(n.code,{children:"ext-jwt-signer"}),". The discovery endpoint\r\ncontains the ",(0,r.jsx)(n.code,{children:"issuer"}),", ",(0,r.jsx)(n.code,{children:"external-auth-url"})," (within the json, this will be the ",(0,r.jsx)(n.code,{children:"authorization_endpoint"})," value), and the\r\n",(0,r.jsx)(n.code,{children:"jwks-endpoint"})," (",(0,r.jsx)(n.code,{children:"jwks_uri"})," from the discovery endpoint). Copy and paste these values ",(0,r.jsx)(n.strong,{children:"exactly"})," as they are\r\nshown into either the ",(0,r.jsx)(n.code,{children:"ziti"})," CLI command, or into the Ziti Admin Console."]}),"\n",(0,r.jsx)(n.p,{children:"After capturing the necessary fields from the discovery endpoint, determine:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["the audience the JWT will present. This can be whatever the IdP is configured for, but it would make sense to have the\r\naudience set to something like ",(0,r.jsx)(n.code,{children:"openziti"})]}),"\n",(0,r.jsx)(n.li,{children:"the client id assigned by the IdP"}),"\n",(0,r.jsx)(n.li,{children:"the claims property that should be mapped from the JWT to an OpenZiti identity"}),"\n",(0,r.jsx)(n.li,{children:"any scopes that the OpenZiti client should request"}),"\n"]}),"\n",(0,r.jsxs)(d.A,{children:[(0,r.jsx)("summary",{children:"Example Configuring OpenZiti for External Auth"}),(0,r.jsxs)(n.h3,{id:"using-the-ziti-cli",children:["Using the ",(0,r.jsx)(n.code,{children:"ziti"})," CLI:"]}),(0,r.jsxs)(n.p,{children:["With the values collected, create an ",(0,r.jsx)(n.code,{children:"ext-jwt-signer"})," with the CLI. Replace the placeholder variables with the appropriate\r\ncontent and execute:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"ziti edge create ext-jwt-signer example-ext-jwt-signer $issuer \\\r\n    --external-auth-url $ext_jwt_auth_url \\\r\n    --jwks-endpoint $jwks_uri \\\r\n    --audience $ext_jwt_audience \\\r\n    --client-id $ext_jwt_client_id \\\r\n    --claims-property $ext_jwt_claims_prop \\\r\n    --scopes $ext_jwt_scopes\n"})}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ziti"})," CLI will indicate success/failure of the opeation."]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"using-the-ziti-admin-console",children:"Using the Ziti Admin Console"}),"\n",(0,r.jsx)(n.h4,{id:"add-external-jwt-signer",children:"Add External JWT Signer"}),"\n",(0,r.jsxs)(n.p,{children:["Navigate to the Authentication page, choose JWT Signers and click the plus in the upper right",(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Add External JWT Signer",src:i(98809).A+"",width:"1240",height:"810"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"initial-fields",children:"Initial Fields"}),"\n",(0,r.jsxs)(n.p,{children:['Fill out the Name, Issuer, Audience, Claims Property and toggle "Use External Id" to on. Then, add the JWKS endpoint\r\non the right side of the screen.',(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Initial Fields",src:i(86173).A+"",width:"1477",height:"928"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"more-option-fields",children:"More Option Fields"}),"\n",(0,r.jsxs)(n.p,{children:['Toggle the "Show More Options" and fill out the Client ID, External Auth URL and add scopes. When done click "Save" in\r\nthe top right corner.',(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"More Option Fields",src:i(70611).A+"",width:"1425",height:"799"})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}const h={},p="External Providers",u={},x=[{value:"Configuring External Auth in OpenZiti",id:"configuring-external-auth-in-openziti",level:2},{value:"A Practical Example",id:"a-practical-example",level:3},{value:"Using the <code>ziti</code> CLI:",id:"using-the-ziti-cli",level:3},{value:"Using the Ziti Admin Console",id:"using-the-ziti-admin-console",level:3},{value:"Add External JWT Signer",id:"add-external-jwt-signer",level:4},{value:"Initial Fields",id:"initial-fields",level:4},{value:"More Option Fields",id:"more-option-fields",level:4},{value:"Add an Externally Authenticated Identity",id:"add-an-externally-authenticated-identity",level:2}];function j(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"external-providers",children:"External Providers"})}),"\n",(0,r.jsxs)(n.p,{children:["The Ziti Desktop Edge for Windows (ZDEW) 2.5.2+ supports integrating with external identity providers such\r\n",(0,r.jsx)(n.a,{href:"/docs/guides/external-auth/identity-providers/auth0",children:"Auth0"}),",\r\n",(0,r.jsx)(n.a,{href:"/docs/guides/external-auth/identity-providers/okta",children:"Okta"}),",\r\n",(0,r.jsx)(n.a,{href:"/docs/guides/external-auth/identity-providers/zitadel",children:"Zitadel"})," and others.\r\nThe OpenZiti Controller has an authentication system utilizing JWTs as authentication tokens.\r\nThe ",(0,r.jsx)(n.a,{href:"/docs/learn/core-concepts/security/authentication/external-jwt-signers",children:"External JWT Signers"}),"\r\nfunctionality allows an OpenZiti operator to configure the OpenZiti overlay to use external providers as sources of\r\nauthentication."]}),"\n",(0,r.jsx)(n.p,{children:"External providers can now be used for primary authentication with the Ziti Desktop Edge for Windows. The default authorization\r\npolicy for an OpenZiti controller will allow external authentication by default. If preferred, a new auth-policy can be\r\ndeclared and assigned to identities, restricting those identities from using other authentication mechanisms and\r\nexclusively rely on external authentication providers."}),"\n",(0,r.jsx)(l,{}),"\n",(0,r.jsxs)(d.A,{children:[(0,r.jsx)("summary",{children:"Example Configuring OpenZiti for External Auth"}),(0,r.jsx)(c,{})]}),"\n",(0,r.jsx)(n.h2,{id:"add-an-externally-authenticated-identity",children:"Add an Externally Authenticated Identity"}),"\n",(0,r.jsx)(n.p,{children:"After configuring the OpenZiti Controller with an external JWT signer, the ZDEW can be used to add an identity using the\r\nexternal provider."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./ext-jwt",children:"External JWT Provider - JWT"})," - Add an identity using the configured provider and network JWT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./ext-jwt-url",children:"External JWT Provider - URL"})," - Add an identity using the configured provider and URL"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(j,{...e})}):j(e)}},61426:(e,n,i)=>{i.d(n,{A:()=>r});i(96540);var t=i(74848);function r(e){const{children:n,style:i}=e;return(0,t.jsx)("span",{style:i,children:(0,t.jsx)("span",{style:{color:"var(--ifm-color-primary)"},children:n})})}},73102:(e,n,i)=>{i.d(n,{A:()=>l});var t=i(96540),r=i(27293);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var i=arguments[n];for(var t in i)({}).hasOwnProperty.call(i,t)&&(e[t]=i[t])}return e},s.apply(null,arguments)}const d=({title:e,titleId:n,...i})=>t.createElement("svg",s({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 9.8 19.5","aria-labelledby":n},i),e?t.createElement("title",{id:n},e):null,t.createElement("path",{d:"M9.8 11.6c0-.2-.1-.4-.2-.5L5.3 7.4c-.2-.2-.6-.2-.8 0L.2 11.1c-.2.2-.3.6 0 .9.2.3.6.3.9.1L5 8.8l3.9 3.3c.3.2.7.2.9-.1z",style:{fill:"#668291"}}));var a=i(74848);function l(e){return"infoa"===e.type?(0,a.jsx)(r.A,{icon:(0,a.jsx)(a.Fragment,{}),title:(0,a.jsx)(a.Fragment,{}),...e}):"info2"===e.type?(0,a.jsx)(r.A,{icon:(0,a.jsx)(d,{}),title:(0,a.jsx)(a.Fragment,{}),...e}):(e.type,(0,a.jsx)(r.A,{...e}))}},70611:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/zac-create-ext-jwt-signer-3-537a35d3568eb26ee4089f9940273e70.png"},86173:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/zac-create-initial-fields-38e796a2347a432e5456b974ceac72e5.png"},98809:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/zac-ext-jwt-signer-basic-51a99f6a3e836ed6eb9ea3f4058cdcc9.png"}}]);