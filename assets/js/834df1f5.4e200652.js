"use strict";(self.webpackChunkdocusaurus_3=self.webpackChunkdocusaurus_3||[]).push([[7820],{88385:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"guides/external-auth/identity-providers/authelia","title":"Authelia","description":"Configure Authelia for with OpenZiti","source":"@site/docs/guides/external-auth/identity-providers/authelia.mdx","sourceDirName":"guides/external-auth/identity-providers","slug":"/guides/external-auth/identity-providers/authelia","permalink":"/docs/guides/external-auth/identity-providers/authelia","draft":false,"unlisted":false,"editUrl":"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/guides/external-auth/identity-providers/authelia.mdx","tags":[],"version":"current","lastUpdatedAt":1754512703000,"frontMatter":{"title":"Authelia","description":"Configure Authelia for with OpenZiti","hide_table_of_contents":true},"sidebar":"docsSidebar","previous":{"title":"Auth0","permalink":"/docs/guides/external-auth/identity-providers/auth0"},"next":{"title":"Authentik","permalink":"/docs/guides/external-auth/identity-providers/authentik"}}');var r=n(74848),a=n(28453);const s={title:"Authelia",description:"Configure Authelia for with OpenZiti",hide_table_of_contents:!0},o="Authelia",l={},d=[{value:"Enable OIDC Within Authelia",id:"enable-oidc-within-authelia",level:2},{value:"Generate a Key/Cert",id:"generate-a-keycert",level:3},{value:"Generate an HMAC Secret",id:"generate-an-hmac-secret",level:3},{value:"Add the OIDC Configuration",id:"add-the-oidc-configuration",level:3},{value:"An Example Configuration",id:"an-example-configuration",level:4},{value:"Common Problems",id:"common-problems",level:2}];function c(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"authelia",children:"Authelia"})}),"\n",(0,r.jsx)("img",{src:"/icons/logo-authelia.svg",alt:"Authelia logo",height:"100px"}),"\n",(0,r.jsxs)(t.p,{children:["This section illustrates where the expected values are found within\n",(0,r.jsx)(t.a,{href:"https://www.authelia.com/integration/prologue/get-started/#configuration",children:"the Authelia config"}),". For a more detailed\nguide on enabling Authelia with OpenZiti, see below.  Use these values to configure an external JWT signer. For\nAuthelia, there is currently no dashboard. All settings are derived from the Authelia configuration file."]}),"\n",(0,r.jsx)(t.admonition,{title:"Authelia-specific",type:"note",children:(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.strong,{children:"audience"})," and ",(0,r.jsx)(t.strong,{children:"client id"})," fields must be the same. If you get an error when authenticating it's possible\nthese two fields are not the same."]}),"\n",(0,r.jsxs)(t.li,{children:["Authelia does not support using ",(0,r.jsx)(t.strong,{children:"Access"})," tokens. You must configure the ext-jwt-signer with the ",(0,r.jsx)(t.strong,{children:"ID"})," token\ntype."]}),"\n"]})}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Field"}),(0,r.jsx)(t.th,{children:"Where to Find the Value in the Authelia Configuration"}),(0,r.jsx)(t.th,{children:"Example"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Issuer"})}),(0,r.jsx)(t.td,{children:"The address of the Authelia server"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"https://authelia.doc.demo.openziti.org:9100",children:"https://authelia.doc.demo.openziti.org:9100"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Client ID"})}),(0,r.jsxs)(t.td,{children:["Specified in the Authelia ",(0,r.jsx)(t.code,{children:"configuration.yml"}),". The ",(0,r.jsx)(t.strong,{children:"client_id"})," of the oidc client"]}),(0,r.jsx)(t.td,{children:"openziti"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Audience"})}),(0,r.jsxs)(t.td,{children:["Specified in the Authelia ",(0,r.jsx)(t.code,{children:"configuration.yml"}),". The ",(0,r.jsx)(t.strong,{children:"audience"})," of the oidc client"]}),(0,r.jsx)(t.td,{children:"openziti"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"External Auth URL"})}),(0,r.jsxs)(t.td,{children:["The same value as the ",(0,r.jsx)(t.strong,{children:"Issuer"})]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"https://authelia.doc.demo.openziti.org:9100",children:"https://authelia.doc.demo.openziti.org:9100"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"JWKS Endpoint"})}),(0,r.jsxs)(t.td,{children:["Use the ",(0,r.jsx)(t.code,{children:"jwks_uri"})," field from the './well-known/openid-configuration' endpoint"]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"https://authelia.doc.demo.openziti.org:9100/jwks.json",children:"https://authelia.doc.demo.openziti.org:9100/jwks.json"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Claims Property"})}),(0,r.jsxs)(t.td,{children:["Often ",(0,r.jsx)(t.code,{children:"email"}),", but can also be ",(0,r.jsx)(t.code,{children:"sub"})," or any other claim contained in the JWT"]}),(0,r.jsx)(t.td,{children:"email"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Scopes"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"openid"})," is always included. Often 'email' but 'profile' or any standard or custom scope"]}),(0,r.jsx)(t.td,{children:"email offline_access"})]})]})]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"enable-oidc-within-authelia",children:"Enable OIDC Within Authelia"}),"\n",(0,r.jsxs)(t.p,{children:["Authelia supports acting as an identity provider. The\n",(0,r.jsx)(t.a,{href:"https://www.authelia.com/configuration/identity-providers/openid-connect/provider/",children:"Authelia documentation for providers"}),"\ncontains an example ",(0,r.jsx)(t.code,{children:"identity_providers.oidc"})," configuration section and describes how to configure Authelia."]}),"\n",(0,r.jsx)(t.h3,{id:"generate-a-keycert",children:"Generate a Key/Cert"}),"\n",(0,r.jsxs)(t.p,{children:["Authelia also provides helper functionality to generate a cert/key in your configuration. For example, a command can be\nissued using a temporary Authelia container to generate a cert and key. That cert and key can then be used with\nAuthelia. Adapt the command shown below for your Authelia deployment and emit the cert and key into a location your\nAuthelia server will be able to access the files. For example, this may be your ",(0,r.jsx)(t.code,{children:"secrets"})," directory as shown:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'title="Use Docker to Generate Cert/Key"',children:'docker run --rm \\\n    -v "/path/to/the/authelia/secrets:/output" \\\n    authelia/authelia \\\n    authelia crypto certificate rsa generate \\\n        --common-name authelia.example.com \\\n        --bits 2048 \\\n        --file.private-key rsa.2048.key \\\n        --file.certificate rsa.2048.cert \\\n        --directory /output\n'})}),"\n",(0,r.jsx)(t.h3,{id:"generate-an-hmac-secret",children:"Generate an HMAC Secret"}),"\n",(0,r.jsx)(t.p,{children:"Leverage openssl and generate a random set of 32 characters to serve as the HMAC secret for the OIDC configuration."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"openssl rand -hex 32 > /path/to/the/authelia/secrets/identity_providers.hmac\n"})}),"\n",(0,r.jsx)(t.h3,{id:"add-the-oidc-configuration",children:"Add the OIDC Configuration"}),"\n",(0,r.jsx)(t.p,{children:"Using the cert and key generated above and the HMAC secret, configure Authelia as an identity provider."}),"\n",(0,r.jsx)(t.h4,{id:"an-example-configuration",children:"An Example Configuration"}),"\n",(0,r.jsxs)(t.p,{children:["Below is a very simple example configuration that would work with Authelia and OpenZiti. The following config also\nleverages the Authelia templating functionality and expects the following and environment variable named ",(0,r.jsx)(t.code,{children:"DOMAIN"})," is\nset with the Authelia domain. A directory exists named ",(0,r.jsx)(t.code,{children:"/authelia/secrets"})," where the following secrets are kept:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"the key and certificate to use for TLS"}),"\n",(0,r.jsx)(t.li,{children:"a storage.encryption_key file"}),"\n",(0,r.jsx)(t.li,{children:"an identity_validation.jwt_secret file"}),"\n",(0,r.jsx)(t.li,{children:"an identity_providers.hmac (from the example command above)"}),"\n",(0,r.jsx)(t.li,{children:"rsa.2048.key and rsa.2048.cert files (from the example command above)"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'server:\n  address: "tcp://0.0.0.0:443"\n  tls:\n    certificate: "/authelia/secrets/certificate_chain.pem"\n    key: "/authelia/secrets/private.key"\n\nauthentication_backend:\n  file:\n    path: /config/users_database.yml\n\naccess_control:\n  default_policy: one_factor\n\nsession:\n  cookies:\n    - domain: "{{ env DOMAIN }}"\n      authelia_url: "https://{{ env DOMAIN }}"\n\nstorage:\n  local:\n    path: /config/db\n  encryption_key: {{ secret "/authelia/secrets/storage.encryption_key" | msquote }}\n\nnotifier:\n  filesystem:\n    filename: /config/notification.log\n\nidentity_validation:\n  reset_password:\n    jwt_secret: {{ secret "/authelia/secrets/identity_validation.jwt_secret" | msquote }}\n\nidentity_providers:\n  oidc:\n    hmac_secret: {{ secret "/authelia/secrets/identity_providers.hmac" | msquote }}\n    jwks:\n      - key_id: \'authelia\'\n        algorithm: \'RS256\'\n        use: \'sig\'\n        key: {{ secret "/authelia/secrets/rsa.2048.key" | mindent 10 "|" | msquote }}\n        certificate_chain: {{ secret "/authelia/secrets/rsa.2048.cert" | mindent 10 "|" | msquote }}\n    enable_client_debug_messages: false\n    require_pushed_authorization_requests: false\n    lifespans:\n      access_token: \'1h\'\n      authorize_code: \'1m\'\n      id_token: \'1h\'\n      refresh_token: \'90m\'\n    cors:\n      endpoints:\n        - \'authorization\'\n        - \'token\'\n        - \'revocation\'\n        - \'introspection\'\n    clients:\n      - client_id: openziti\n        client_name: "OpenZiti Auth"\n        audience: "openziti"\n        public: true\n        authorization_policy: one_factor\n        consent_mode: pre-configured\n        response_types:\n          - "code"\n        scopes:\n          - openid\n          - groups\n          - email\n          - profile\n          - offline_access\n        redirect_uris:\n          - http://localhost:20314/auth/callback\n          - https://*.browzer.example.com\n        grant_types:\n          - refresh_token\n          - authorization_code\n'})}),"\n",(0,r.jsx)(t.h2,{id:"common-problems",children:"Common Problems"}),"\n",(0,r.jsx)(t.p,{children:"If you do not set the client id and the audience to the same value, you may encounter an error such as:"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"invalid_request: The request is missing a required parameter, includes an invalid parameter value, includes a\nparameter more than once, or is otherwise malformed. Requested audience 'openziti_client_id' has not been\nwhitelisted by the OAuth 2.0 Client."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(96540);const r={},a=i.createContext(r);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);