"use strict";(self.webpackChunkdocusaurus_3=self.webpackChunkdocusaurus_3||[]).push([[9524],{43418:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>h,default:()=>m,frontMatter:()=>d,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"guides/deployments/linux/console","title":"Console Deployment","description":"Installation","source":"@site/docs/guides/deployments/10-linux/30-console.mdx","sourceDirName":"guides/deployments/10-linux","slug":"/guides/deployments/linux/console","permalink":"/docs/guides/deployments/linux/console","draft":false,"unlisted":false,"editUrl":"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/guides/deployments/10-linux/30-console.mdx","tags":[],"version":"current","lastUpdatedAt":1755607176000,"sidebarPosition":30,"frontMatter":{"title":"Console Deployment","sidebar_label":"Console"},"sidebar":"docsSidebar","previous":{"title":"Backup","permalink":"/docs/guides/deployments/linux/router/backup"},"next":{"title":"Docker","permalink":"/docs/category/docker"}}');var s=t(74848),r=t(28453),o=t(78960),l=t(62033),c=t(89133),a=t(58198);const d={title:"Console Deployment",sidebar_label:"Console"},h=void 0,p={},u=[{value:"Installation",id:"installation",level:2},{value:"Install the Package",id:"install-the-package",level:3},{value:"Install from GitHub",id:"install-from-github",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Authenticate with an Admin Client Certificate",id:"authenticate-with-an-admin-client-certificate",level:2},...o.RM,...l.RM,...c.RM,...a.RM];function x(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.h3,{id:"install-the-package",children:"Install the Package"}),"\n",(0,s.jsxs)(n.p,{children:["The package installs the console files in ",(0,s.jsx)(n.code,{children:"/opt/openziti/share/console"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",metastring:'title="Install the console package"',children:"sudo apt install openziti-console\n"})}),"\n",(0,s.jsx)(n.p,{children:"Or, configure the package repository and install with this one-liner."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",metastring:'title="Configure the package repository and install openziti-console"',children:"curl -sS https://get.openziti.io/install.bash | sudo bash -s openziti-console\n"})}),"\n",(0,s.jsx)(n.h3,{id:"install-from-github",children:"Install from GitHub"}),"\n",(0,s.jsx)(n.p,{children:"Console versions >= 3.0.0 from GitHub may be used."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Download a release."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"wget https://github.com/openziti/ziti-console/releases/latest/download/ziti-console.zip\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Unzip in a directory that is mounted the controller's filesystem namespace."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"sudo mkdir -p /opt/openziti/share/console\nsudo unzip -d /opt/openziti/share/console ./ziti-console.zip\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.strong,{children:"/var/lib/ziti-controller/config.yml"}),", ensure you have an API binding ",(0,s.jsx)(n.code,{children:"zac"})," on the same web listener where ",(0,s.jsx)(n.code,{children:"edge-management"})," is bound. Ensure the ",(0,s.jsx)(n.code,{children:"location"})," matches the path to the console files."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"- binding: zac\n  options:\n    location: /opt/openziti/share/console\n    indexFile: index.html\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Restart the controller service if you edited the configuration."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"sudo systemctl restart ziti-controller.service\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Visit the controller's web address in a browser to access the console."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"https://ctrl.ziti.example.com:1280/zac/\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Console certificate option - The console is served from the controller's API and can be used with the default API certificate. The controller can be configured to present a different certificate for the console when the API is accessed by a distinct URL for the console. For more information about using alternative server certs with the controller, see: ",(0,s.jsxs)(n.a,{href:"/docs/reference/configuration/conventions#identity",children:["the configuration reference for the ",(0,s.jsx)(n.code,{children:"identity"})," property"]}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"authenticate-with-an-admin-client-certificate",children:"Authenticate with an Admin Client Certificate"}),"\n",(0,s.jsx)(o.Ay,{}),"\n",(0,s.jsx)(l.Ay,{}),"\n",(0,s.jsx)(c.Ay,{}),"\n",(0,s.jsx)(a.Ay,{})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},89133:(e,n,t)=>{t.d(n,{Ay:()=>l,RM:()=>r});var i=t(74848),s=t(28453);const r=[{value:"Steps",id:"steps",level:2}];function o(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create and validate your certificates (for example with Let's Encrypt Certbot)"}),"\n",(0,i.jsx)(n.li,{children:"Alter the controller configuration using example below as a guide"}),"\n",(0,i.jsxs)(n.li,{children:["Restart the ",(0,i.jsx)(n.code,{children:"ziti-controller"})," service"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"See the example configuration here:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'web:\n  - name: client-management\n    identity:\n      ...\n      alt_server_certs:\n      - server_cert: "/etc/letsencrypt/live/<YOUR_DOMAIN_NAME>/fullchain.pem"\n        server_key:  "/etc/letsencrypt/live/<YOUR_DOMAIN_NAME>/privkey.pem"\n'})}),"\n",(0,i.jsx)(n.p,{children:'At this point, the controller service should use the certificates for the ZAC, removing any "Potential Security\nRisk" warnings.'})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},58198:(e,n,t)=>{t.d(n,{Ay:()=>l,RM:()=>r});var i=t(74848),s=t(28453);const r=[];function o(e){const n={a:"a",admonition:"admonition",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"/docs/guides/deployments/console",children:(0,i.jsx)(n.strong,{children:"The Console and Alternative Server Certificates"})}),"\nfor more details on how to use public certificates within your enviromment."]})})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},62033:(e,n,t)=>{t.d(n,{Ay:()=>l,RM:()=>r});var i=t(74848),s=t(28453);const r=[{value:"Using Public Certificates",id:"using-public-certificates",level:2}];function o(e){const n={a:"a",code:"code",h2:"h2",p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"using-public-certificates",children:"Using Public Certificates"}),"\n",(0,i.jsx)(n.p,{children:"It is possible to remove certificate based security warnings."}),"\n",(0,i.jsx)(n.p,{children:"By default, the OpenZiti Controller is configured with a certificate issued by its self-signed PKI. Unless\nyou've specifically added this certificate to all your web browsers, this will result in modern browsers showing\na warning when accessing the console UI."}),"\n",(0,i.jsxs)(n.p,{children:["Although not strictly a security issue, it's convenient to use certificates from a widely trusted CA such\nas ",(0,i.jsx)(n.a,{href:"https://letsencrypt.org/",children:"Let's Encrypt"}),", ",(0,i.jsx)(n.a,{href:"https://zerossl.com/",children:"ZeroSSL"}),", etc. Using a certificate from\na widely trusted CA will very likely ensure any console user does not receive this warning."]}),"\n",(0,i.jsxs)(n.p,{children:["Assuming you are serving the console from the controller, you can configure the OpenZiti Controller to serve\nan alternate server certificate using the ",(0,i.jsx)(n.code,{children:"alt_server_certs"})," configuration stanza."]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},78960:(e,n,t)=>{t.d(n,{Ay:()=>l,RM:()=>r});var i=t(74848),s=t(28453);const r=[];function o(e){const n={a:"a",code:"code",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Enroll an admin identity. ",(0,i.jsx)(n.a,{href:"/docs/reference/command-line/login",children:"Link to instructions"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Unwrap the JSON file to obtain the certificate and private key."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"ziti ops unwrap admin2.json\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Compose a keystore from the certificate and private key. The ",(0,i.jsx)(n.code,{children:"-legacy"})," flag is necessary when importing the keystore into some versions of macOS Keychain Access."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"openssl pkcs12 -export -in admin2.cert -inkey admin2.key -out admin2.p12 -name \"admin2\" -legacy -password 'pass:mypassword'\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Import the keystore:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"macOS: Import into System Keychain via Keychain Access application for Google Chrome. You can run a terminal command or double-click the keystore file or drag it onto the login keychain to import it."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"security import admin2.p12 -k ~/Library/Keychains/login.keychain -T /Applications/Google\\ Chrome.app -P 'mypass'\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Windows: Import into the Windows Certificate Store (Personal store) via certmgr.msc."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Linux: Import into your browser's certificate store or system certificate store (e.g., Chrome Settings > Privacy and Security > Security > Manage certificates)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Visit the console in your web browser. The browser will prompt with a list of imported client certificates. Select the one you imported in the previous step."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'Press the "LOGIN" button without entering a password.'}),"\n"]}),"\n"]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(96540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);