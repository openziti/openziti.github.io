"use strict";(self.webpackChunkdocusaurus_3=self.webpackChunkdocusaurus_3||[]).push([[7201],{82982:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"guides/troubleshooting/pki-troubleshooting/index","title":"PKI Troubleshooting","description":"Configuring a network\'s PKI can be confusing. Validating a single side of a mutual TLS connection is","source":"@site/docs/guides/troubleshooting/pki-troubleshooting/index.mdx","sourceDirName":"guides/troubleshooting/pki-troubleshooting","slug":"/guides/troubleshooting/pki-troubleshooting/","permalink":"/docs/guides/troubleshooting/pki-troubleshooting/","draft":false,"unlisted":false,"editUrl":"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/guides/troubleshooting/pki-troubleshooting/index.mdx","tags":[],"version":"current","lastUpdatedAt":1757339600000,"frontMatter":{"title":"PKI Troubleshooting"},"sidebar":"docsSidebar","previous":{"title":"Circuit Create Error Codes","permalink":"/docs/guides/troubleshooting/circuit-create-error-codes"},"next":{"title":"Renewed Certs","permalink":"/docs/guides/troubleshooting/pki-troubleshooting/renew-cert"}}');var o=t(74848),r=t(28453);const l={title:"PKI Troubleshooting"},s=void 0,a={},c=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Define the verifyCertAgainstPool Function",id:"define-the-verifycertagainstpool-function",level:4},{value:"Validating the PKI",id:"validating-the-pki",level:3},{value:"Success",id:"success",level:4},{value:"Failure",id:"failure",level:4},{value:"Ziti Edge Router to Controller",id:"ziti-edge-router-to-controller",level:3},{value:"Variables to Establish Manually",id:"variables-to-establish-manually",level:4},{value:"Variables - Copy/Paste",id:"variables---copypaste",level:4},{value:"Commands to Verify PKI Configuration",id:"commands-to-verify-pki-configuration",level:4},{value:"Ziti Client to Controller - API",id:"ziti-client-to-controller---api",level:3},{value:"Variables to Establish Manually",id:"variables-to-establish-manually-1",level:4},{value:"Variables - Copy/Paste",id:"variables---copypaste-1",level:4},{value:"Commands to Verify PKI Configuration",id:"commands-to-verify-pki-configuration-1",level:4},{value:"Ziti Client to Ziti Edge Router - Data",id:"ziti-client-to-ziti-edge-router---data",level:3},{value:"Variables to Establish Manually",id:"variables-to-establish-manually-2",level:4},{value:"Variables - Copy/Paste",id:"variables---copypaste-2",level:4},{value:"Commands to Verify PKI Configuration",id:"commands-to-verify-pki-configuration-2",level:4}];function d(e){const i={a:"a",code:"code",h3:"h3",h4:"h4",hr:"hr",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.p,{children:"Configuring a network's PKI can be confusing. Validating a single side of a mutual TLS connection is\nstraightforward it becomes tedious to ensure all the certificates and cas in use are valid when you have a fully\nconfigured network. It's the goal of this page to make diagnosing PKI issues easier."}),"\n",(0,o.jsx)(i.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(i.p,{children:["The following steps are ",(0,o.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Bash_(Unix_shell)",children:"bash-based"})," functions and use the\n",(0,o.jsx)(i.a,{href:"https://www.openssl.org/",children:"openssl"}),", ",(0,o.jsx)(i.a,{href:"https://stedolan.github.io/jq/",children:"jq"})," and ",(0,o.jsx)(i.a,{href:"https://www.ruby-lang.org/en/",children:"ruby"}),"\ncommands. If you don't have bash, openssl and ruby - this page is not for you! Do your best to follow along with the\nscripts and guidance herein or just make sure bash, openssl, ruby, and jq are installed. All of which are widely\navailable on linux/MacOS/Windows."]}),"\n",(0,o.jsxs)(i.p,{children:["The ",(0,o.jsx)(i.code,{children:"ruby"})," and ",(0,o.jsx)(i.code,{children:"jq"})," commands are not strictly required. They are used to make it easy for you to copy/paste these\ncommands. The ",(0,o.jsx)(i.code,{children:"ruby"})," command is used to translate yaml into json while the ",(0,o.jsx)(i.code,{children:"jq"})," command is used to pull the specific\nvalues out of the given files. You can certainly do the same manually (without ",(0,o.jsx)(i.code,{children:"ruby"})," and ",(0,o.jsx)(i.code,{children:"jq"}),") if you choose."]}),"\n",(0,o.jsx)(i.h4,{id:"define-the-verifycertagainstpool-function",children:"Define the verifyCertAgainstPool Function"}),"\n",(0,o.jsx)(i.p,{children:"In your bash prompt copy and paste these two functions:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:'    function yaml2json()\n    {\n        ruby -ryaml -rjson -e \'puts JSON.pretty_generate(YAML.load(ARGF))\' $*\n    }\n\n    function verifyCertAgainstPool()\n    {\n        if [[ "" == "$1" ]]\n        then\n            echo "Usage: verifyCertAgainstPool [cert to test] [ca pool to use]"\n            return 1\n        fi\n        \n        if [[ "" == "$2" ]]\n        then\n            echo "Usage: verifyCertAgainstPool [cert to test] [ca pool to use]"\n            return 1\n        fi\n\n        echo "    Verifying that this certificate:"\n        echo "        - $1"\n        echo "    is valid for this ca pool:"\n        echo "        - $2"\n        echo ""\n        openssl verify -partial_chain -CAfile "$2" "$1"\n        if [ $? -eq 0 ]; then\n            echo ""\n            echo "============      SUCCESS!      ============"\n        else\n            echo ""\n            echo "============ FAILED TO VALIDATE ============"\n        fi\n    }\n'})}),"\n",(0,o.jsx)(i.h3,{id:"validating-the-pki",children:"Validating the PKI"}),"\n",(0,o.jsx)(i.p,{children:"Every connection in a network is mutually authenticated via X509 certificates. It is easiest to first identify the\ntwo components trying to communicate to isolate and minimize the configuration and files that need to be inspected.\nBelow you will find sections relevant to each of the pieces of Ziti which connect."}),"\n",(0,o.jsx)(i.p,{children:"Each section will refer to a bash variable that is expected to be established before running the command. This variable\nis intended to make it easier for you to simply copy/paste the command and determine if the configuration is valid or\nnot."}),"\n",(0,o.jsx)(i.p,{children:"Using the provided bash function above - you will see one of two results:"}),"\n",(0,o.jsx)(i.h4,{id:"success",children:"Success"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"    verifyCertAgainstPool /path/to/cert-to-test.cert /path/to/capool.pem\n        Verifying that this certificate:\n            - /path/to/cert-to-test.cert\n        is valid for this ca pool:\n            - /path/to/capool.pem\n\n    /path/to/cert-to-test.cert: OK\n\n    ============      SUCCESS!      ============\n"})}),"\n",(0,o.jsx)(i.h4,{id:"failure",children:"Failure"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"    verifyCertAgainstPool /path/to/cert-to-test.cert /path/to/capool.pem\n        Verifying that this certificate:\n            - /path/to/cert-to-test.cert\n        is valid for this ca pool:\n            - /path/to/capool.pem\n\n    C = US, ST = NC, L = Charlotte, O = NetFoundry, OU = Ziti, CN = 87f8cee9-b288-49f1-ab90-b664af29e17a\n    error 20 at 0 depth lookup: unable to get local issuer certificate\n    error /path/to/cert-to-test.cert: verification failed\n\n    ============ FAILED TO VALIDATE ============\n"})}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsx)(i.h3,{id:"ziti-edge-router-to-controller",children:"Ziti Edge Router to Controller"}),"\n",(0,o.jsx)(i.h4,{id:"variables-to-establish-manually",children:"Variables to Establish Manually"}),"\n",(0,o.jsx)(i.p,{children:"These two variables represent the edge router configuration file and the Controller configuration file."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"    controller_config_file=~/.config/ziti/ziti-controller/ziti_controller.yml\n    edge_router_config_file=~/.config/ziti/ziti-router/ziti_router.yml\n"})}),"\n",(0,o.jsx)(i.h4,{id:"variables---copypaste",children:"Variables - Copy/Paste"}),"\n",(0,o.jsx)(i.p,{children:"These commands extract the files specified in the configuration and store them into the assigned variables."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"    edge_router_cert=$(yaml2json $edge_router_config_file | jq -j .identity.cert)\n    signing_cert=$(yaml2json $controller_config_file | jq -j .edge.enrollment.signingCert.cert)\n    controller_cert=$(yaml2json $controller_config_file | jq -j .identity.cert)\n    edge_router_ca=$(yaml2json $edge_router_config_file | jq -j .identity.ca)\n"})}),"\n",(0,o.jsx)(i.h4,{id:"commands-to-verify-pki-configuration",children:"Commands to Verify PKI Configuration"}),"\n",(0,o.jsx)(i.p,{children:"Both of these commands should report SUCCESS."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"    verifyCertAgainstPool $edge_router_cert $signing_cert\n    verifyCertAgainstPool $controller_cert $edge_router_ca\n"})}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsx)(i.h3,{id:"ziti-client-to-controller---api",children:"Ziti Client to Controller - API"}),"\n",(0,o.jsx)(i.h4,{id:"variables-to-establish-manually-1",children:"Variables to Establish Manually"}),"\n",(0,o.jsx)(i.p,{children:"These two variables represent the identity file in json for a Ziti client and the Controller configuration file."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"    identity_file=/path/to/enrolled-identity.json\n    controller_config_file=~/.config/ziti/ziti-controller/ziti_controller.yml\n"})}),"\n",(0,o.jsx)(i.h4,{id:"variables---copypaste-1",children:"Variables - Copy/Paste"}),"\n",(0,o.jsx)(i.p,{children:"These commands will extract the cert and ca from the enrolled identity file and put it into a file in the /tmp folder"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:'    jq -j .id.cert $identity_file | cut -d ":" -f2 > /tmp/identity.cert\n    jq -j .id.ca $identity_file | cut -d ":" -f2 > /tmp/identity.ca\n'})}),"\n",(0,o.jsx)(i.p,{children:"These commands extract the files specified in the configuration and store them into the assigned variables."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:'    controller_cert=$(yaml2json $controller_config_file | jq -j .identity.cert)\n    signing_cert=$(yaml2json $controller_config_file | jq -j .edge.enrollment.signingCert.cert)\n    \n    controller_api_server_cert=$(yaml2json $controller_config_file | jq -j .edge.api.identity.server_cert)\n    if [[ "null" == "$controller_api_server_cert" ]]; then controller_api_server_cert=$(yaml2json $controller_config_file | jq -j .identity.server_cert); fi\n'})}),"\n",(0,o.jsx)(i.h4,{id:"commands-to-verify-pki-configuration-1",children:"Commands to Verify PKI Configuration"}),"\n",(0,o.jsx)(i.p,{children:"Both of these commands should report SUCCESS."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"    verifyCertAgainstPool /tmp/identity.cert $signing_cert\n    verifyCertAgainstPool $controller_api_server_cert /tmp/identity.ca\n"})}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsx)(i.h3,{id:"ziti-client-to-ziti-edge-router---data",children:"Ziti Client to Ziti Edge Router - Data"}),"\n",(0,o.jsx)(i.h4,{id:"variables-to-establish-manually-2",children:"Variables to Establish Manually"}),"\n",(0,o.jsx)(i.p,{children:"These two variables represent the identity file in json for a Ziti client and the Controller configuration file."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"    identity_file=/path/to/enrolled-identity.json\n    edge_router_config_file=~/.config/ziti/ziti-router/ziti_router.yml\n"})}),"\n",(0,o.jsx)(i.h4,{id:"variables---copypaste-2",children:"Variables - Copy/Paste"}),"\n",(0,o.jsx)(i.p,{children:"This command will extract the ca from the enrolled identity file and put it into a file in the /tmp folder"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:'    jq -j .id.ca $identity_file | cut -d ":" -f2 > /tmp/identity.ca\n'})}),"\n",(0,o.jsx)(i.p,{children:"This command extracts the file specified in the configuration and stores it into the assigned variable."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"    edge_router_cert=$(yaml2json $edge_router_config_file | jq -j .identity.cert)\n"})}),"\n",(0,o.jsx)(i.h4,{id:"commands-to-verify-pki-configuration-2",children:"Commands to Verify PKI Configuration"}),"\n",(0,o.jsx)(i.p,{children:"The following command should report SUCCESS."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"    verifyCertAgainstPool $edge_router_cert /tmp/identity.ca\n"})})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>l,x:()=>s});var n=t(96540);const o={},r=n.createContext(o);function l(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);