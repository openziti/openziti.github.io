"use strict";(self.webpackChunkdocusaurus_3=self.webpackChunkdocusaurus_3||[]).push([[7360],{98975:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"guides/deployments/docker/router","title":"Deploy the Router with Docker","description":"","source":"@site/docs/guides/deployments/20-docker/20-router.mdx","sourceDirName":"guides/deployments/20-docker","slug":"/guides/deployments/docker/router","permalink":"/docs/guides/deployments/docker/router","draft":false,"unlisted":false,"editUrl":"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/guides/deployments/20-docker/20-router.mdx","tags":[],"version":"current","lastUpdatedAt":1743513678000,"sidebarPosition":20,"frontMatter":{"title":"Deploy the Router with Docker","sidebar_label":"Router"},"sidebar":"docsSidebar","previous":{"title":"Controller","permalink":"/docs/guides/deployments/docker/controller"},"next":{"title":"Console","permalink":"/docs/guides/deployments/docker/console"}}');var r=n(74848),i=n(28453);function s(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"run-ziti-router-in-docker",children:"Run Ziti Router in Docker"})}),"\n",(0,r.jsx)(t.p,{children:"You can use this container image to run a Ziti Router in a Docker container."}),"\n",(0,r.jsx)(t.h2,{id:"container-image",children:"Container Image"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"openziti/ziti-router"})," image is thin and is based on the ",(0,r.jsx)(t.code,{children:"openziti/ziti-cli"})," image, which only provides the ",(0,r.jsx)(t.code,{children:"ziti"}),"\nCLI. This ",(0,r.jsx)(t.code,{children:"ziti-router"})," image adds an entrypoint that provides router bootstrapping when ",(0,r.jsx)(t.code,{children:"ZITI_BOOTSTRAP=true"})," and uses\nthe same defaults and options as the Linux package."]}),"\n",(0,r.jsx)(t.h2,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,r.jsxs)(t.p,{children:["The included ",(0,r.jsx)(t.code,{children:"compose.yml"})," demonstrates how to bootstrap a router and documents the most relevant environment variables\nthat influence bootstrapping."]}),"\n",(0,r.jsx)(t.h3,{id:"standalone-example",children:"Standalone Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:'# create the router, saving the enrollment token to a file\nziti edge create edge-router "router1" \\\n   --jwt-output-file=./router1.jwt\n\n# fetch the compose file for the ziti-router image\nwget https://get.openziti.io/dist/docker-images/ziti-router/compose.yml\n\nZITI_ENROLL_TOKEN="$(<./router1.jwt)" \\\nZITI_CTRL_ADVERTISED_ADDRESS=ctrl.127.21.71.0.sslip.io \\\nZITI_CTRL_ADVERTISED_PORT=1280 \\\nZITI_ROUTER_ADVERTISED_ADDRESS=router1.127.0.0.1.sslip.io \\\nZITI_ROUTER_PORT=3022 \\\n    docker compose up\n'})}),"\n",(0,r.jsx)(t.h3,{id:"sidecar-example",children:"Sidecar Example"}),"\n",(0,r.jsx)(t.p,{children:"You can use this image as a sidecar container that provides Ziti DNS and TPROXY interception to another container. This\ncontrived example provides a web server that listens on port 8000 and a client that waits for the webserver to be\navailable. The client container shares a network interface with the router container and waits for the router to be\nhealthy before running."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:"# fetch the compose file for the ziti-router image\nwget -O ./compose.router.yml https://get.openziti.io/dist/docker-images/ziti-router/compose.yml\n# fetch the router tproxy compose overrides files\nwget -O ./compose.tproxy.yml https://get.openziti.io/dist/docker-images/ziti-router/compose.override.yml\n# fetch the all-in-one quickstart compose file\nwget -O ./compose.quickstart.yml https://get.openziti.io/dock/all-in-one/compose.yml\n"})}),"\n",(0,r.jsx)(t.p,{children:"Patch the Compose project to use the quickstart network and provide a web server to test the hello service."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:"cat <<EOF >>./compose.tproxy.yml\n    # link the router to the quickstart network so it can reach the Ziti controller\n    networks:\n      - quickstart\n\n  # add a hello web server to use for a Ziti service target\n  hello:\n    image: openziti/hello-world\n    expose:\n      - 8000\n    networks:\n      - quickstart\n\n  # add a web client that waits for a healthy tproxy router\n  tproxy-demo-client:\n    image: busybox\n    network_mode: service:ziti-router\n    depends_on:\n      ziti-router:\n        condition: service_healthy\n    command: wget --output-document=- http://hello.internal/\nEOF\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Your ",(0,r.jsx)(t.code,{children:"compose.tproxy.yml"})," should look like this."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:"services:\n  ziti-router:\n    dns:\n      - 127.0.0.1\n      - 1.1.1.1\n    user: root\n    cap_add:\n      - NET_ADMIN\n    networks:\n      - quickstart\n\n  hello:\n    image: openziti/hello-world\n    expose:\n      - 8000\n    networks:\n      - quickstart\n\n  tproxy-demo-client:\n    image: busybox\n    network_mode: service:ziti-router\n    depends_on:\n      ziti-router:\n        condition: service_healthy\n    command: wget --output-document=- http://hello.internal/\n"})}),"\n",(0,r.jsx)(t.p,{children:"Define the Compose project files."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:"export COMPOSE_FILE=compose.router.yml:compose.tproxy.yml:compose.quickstart.yml\n"})}),"\n",(0,r.jsx)(t.p,{children:"Run the Ziti controller in the background with the all-in-one quickstart container."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:"docker compose up quickstart-check\n"})}),"\n",(0,r.jsx)(t.p,{children:"Start the hello web server listening on 8000."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:"docker compose up hello --detach\n"})}),"\n",(0,r.jsx)(t.p,{children:"Log in to the Ziti controller"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:"ziti edge login 127.0.0.1:1280 -y -u admin -p admin\n"})}),"\n",(0,r.jsx)(t.p,{children:"Create a Ziti service for the hello web server."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:'ziti edge create config "hello-intercept-config" intercept.v1 \\\n  \'{"portRanges":[{"high":80,"low":80}],"addresses":["hello.internal"],"protocols":["tcp"]}\'\nziti edge create config "hello-host-config" host.v1 \\\n  \'{"address":"hello","port":8000,"forwardProtocol":true,"allowedProtocols":["tcp"]}\'\nziti edge create service "hello" \\\n  --configs "hello-intercept-config,hello-host-config" \\\n  --role-attributes \'hello.services\'\nziti edge create service-policy "hello-dial-policy" Dial \\\n  --semantic AnyOf \\\n  --service-roles \'#hello.services\' \\\n  --identity-roles \'#hello.clients\'\nziti edge create service-policy "hello-bind-policy" Bind \\\n  --semantic AnyOf \\\n  --service-roles \'#hello.services\' \\\n  --identity-roles \'#hello.servers\'\n'})}),"\n",(0,r.jsx)(t.p,{children:"Grant the quickstart router permission to bind (provide) the hello service."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:"ziti edge update identity quickstart-router \\\n    --role-attributes=hello.servers\n"})}),"\n",(0,r.jsx)(t.p,{children:"Create a second Ziti router to use as a tproxy client."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:'ziti edge create edge-router "tproxy-router" \\\n   --jwt-output-file=./tproxy-router.jwt \\\n   --tunneler-enabled\n'})}),"\n",(0,r.jsx)(t.p,{children:"Grant the tproxy client permission to dial (consume) the hello service"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:"ziti edge update identity tproxy-router \\\n    --role-attributes=hello.clients\n"})}),"\n",(0,r.jsx)(t.p,{children:"Simulate policies to check for authorization problems"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:"ziti edge policy-advisor services -q\n"})}),"\n",(0,r.jsx)(t.p,{children:"Run the demo client which triggers the run of the tproxy router because it is a dependency."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:'ZITI_ENROLL_TOKEN="$(<./tproxy-router.jwt)" \\\nZITI_ROUTER_MODE=tproxy \\\nZITI_CTRL_ADVERTISED_ADDRESS=quickstart \\\nZITI_CTRL_ADVERTISED_PORT=1280 \\\nZITI_ROUTER_PORT=3023 \\\nZITI_ROUTER_ADVERTISED_ADDRESS=ziti-router \\\n    docker compose up tproxy-demo-client\n'})})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}const l={title:"Deploy the Router with Docker",sidebar_label:"Router"},a=void 0,d={},h=[{value:"Container Image",id:"container-image",level:2},{value:"Docker Compose",id:"docker-compose",level:2},{value:"Standalone Example",id:"standalone-example",level:3},{value:"Sidecar Example",id:"sidecar-example",level:3}];function p(e){return(0,r.jsx)(c,{})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p()}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var o=n(96540);const r={},i=o.createContext(r);function s(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);