"use strict";(self.webpackChunkdocusaurus_3=self.webpackChunkdocusaurus_3||[]).push([[2671],{23456:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"learn/quickstarts/network/local-with-docker","title":"Local - With Docker","description":"Quickstarts are short-lived networks that are great for learning how to use OpenZiti. For long-lived production deployments, see the deployment guides.","source":"@site/docs/learn/quickstarts/network/local-with-docker.mdx","sourceDirName":"learn/quickstarts/network","slug":"/learn/quickstarts/network/local-with-docker","permalink":"/docs/learn/quickstarts/network/local-with-docker","draft":false,"unlisted":false,"editUrl":"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/learn/quickstarts/network/local-with-docker.mdx","tags":[],"version":"current","lastUpdatedAt":1743697157000,"sidebarPosition":40,"frontMatter":{"title":"Local - With Docker","sidebar_position":40},"sidebar":"docsSidebar","previous":{"title":"Local - No Docker","permalink":"/docs/learn/quickstarts/network/local-no-docker"},"next":{"title":"Local - Docker Compose","permalink":"/docs/learn/quickstarts/network/local-docker-compose"}}');var i=t(74848),o=t(28453),s=t(2754);const l={title:"Local - With Docker",sidebar_position:40},a=void 0,c={},d=[{value:"Starting the Controller",id:"starting-the-controller",level:2},{value:"Required - Docker Named Volume",id:"required---docker-named-volume",level:3},{value:"Required - Docker Network",id:"required---docker-network",level:3},{value:"Optional - Expose Controller Port",id:"optional---expose-controller-port",level:3},{value:"Running the Controller",id:"running-the-controller",level:3},{value:"Create Edge Router Policies",id:"create-edge-router-policies",level:2},{value:"Edge Router",id:"edge-router",level:2},{value:"Testing the Network",id:"testing-the-network",level:2},{value:"Using Docker Locally",id:"using-docker-locally",level:3},{value:"Testing",id:"testing",level:3},{value:"Next Steps",id:"next-steps",level:2}];function h(e){const r={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.admonition,{type:"info",children:(0,i.jsxs)(r.p,{children:["Quickstarts are short-lived networks that are great for learning how to use OpenZiti. For long-lived production deployments, see ",(0,i.jsx)(r.a,{href:"/docs/category/docker",children:"the deployment guides"}),"."]})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.a,{href:"https://www.docker.com",children:"Docker"})," is a popular container engine, and many developers enjoy using solutions delivered via\r\nDocker. Ziti provides a single Docker container which contains the entire stack of Ziti components. This is not the most\r\ncommon mechanism for deploying containers, we recognize that. However, we think that this makes it a bit easier for\r\npeople to get started with deploying Ziti components using Docker. We will certainly look to create individual\r\ncontainers for each component in the future but for now it's a single container. You can get this container by issuing\r\n",(0,i.jsx)(r.code,{children:"docker pull openziti/quickstart:latest"}),"."]}),"\n",(0,i.jsx)(r.h2,{id:"starting-the-controller",children:"Starting the Controller"}),"\n",(0,i.jsxs)(r.p,{children:["All ",(0,i.jsx)(r.a,{href:"/docs/learn/introduction/",children:"networks"})," require\r\na ",(0,i.jsx)(r.a,{href:"/docs/guides/deployments/linux/controller/deploy",children:"controller"}),". Without a controller, edge routers won't be able to authorize new\r\nconnections rendering a new network useless. You must have a controller running."]}),"\n",(0,i.jsx)(r.h3,{id:"required---docker-named-volume",children:"Required - Docker Named Volume"}),"\n",(0,i.jsx)(r.p,{children:'Running Ziti locally via Docker will require you to create a "named volume" in docker where any and all persistent files\r\nwill be saved.'}),"\n",(0,i.jsx)(r.p,{children:"Create the named volume now using this command:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-text",children:"docker volume create myPersistentZitiFiles\n"})}),"\n",(0,i.jsx)(r.h3,{id:"required---docker-network",children:"Required - Docker Network"}),"\n",(0,i.jsxs)(r.p,{children:["Other containers on the Docker network will ",(0,i.jsx)(r.strong,{children:"need"})," to address the controller. To do this, the container requires\r\na network alias. This forces you to add the container to a network which is not the default network."]}),"\n",(0,i.jsx)(r.p,{children:"Create the docker network now using this command:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-text",children:"docker network create myFirstZitiNetwork\n"})}),"\n",(0,i.jsxs)(r.p,{children:["When starting containers participating in this network, the docker network name will be supplied as a parameter\r\nto the ",(0,i.jsx)(r.code,{children:"docker"})," command. It's important for containers to be able to address other containers on the docker network,\r\nthis requires predictable container names on the docker network. When looking at the example commands below, these\r\noptions are the ones controlling the network name and network alias on the network:\r\n",(0,i.jsx)(r.code,{children:"--network myFirstZitiNetwork --network-alias ziti-controller"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"optional---expose-controller-port",children:"Optional - Expose Controller Port"}),"\n",(0,i.jsxs)(r.p,{children:["Docker containers by default won't expose any ports that you could use from your local machine. If you want to be able\r\nto use this controller from outside of Docker, you'll need to export the controller's API port. That's easy to do,\r\nsimply pass one more parameter to the ",(0,i.jsx)(r.code,{children:"docker"})," command: ",(0,i.jsx)(r.code,{children:"-p ${externalPort}:${internalPort}"})]}),"\n",(0,i.jsx)(r.h3,{id:"running-the-controller",children:"Running the Controller"}),"\n",(0,i.jsxs)(r.p,{children:["Here's an example of how to launch a controller using the folder created in the steps above. Also, notice this command\r\npasses a couple extra flags you'll see used on this page. Notably\r\nthe ",(0,i.jsx)(r.code,{children:"--rm"})," flag and the ",(0,i.jsx)(r.code,{children:"-it"})," flag. The ",(0,i.jsx)(r.code,{children:"--rm"})," flag instructs Docker to delete the container when the container exits.\r\nThe ",(0,i.jsx)(r.code,{children:"-it"})," flag will run the container interactively. Running interactively like this makes it easier to see the logs\r\nproduced, but you will need a terminal for each process you want to run. The choice is yours, but in these examples\r\nwe'll use ",(0,i.jsx)(r.code,{children:"-it"})," to make seeing the output from the logs easier."]}),"\n",(0,i.jsx)(r.p,{children:'Here\'s an example which will use the Docker network named "myFirstZitiNetwork" and expose the controller to your local\r\ncomputer on port 1280 (the default port).'}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-text",children:"docker run \\\r\n  --name ziti-controller \\\r\n  -e ZITI_CTRL_ADVERTISED_ADDRESS=ziti-edge-controller \\\r\n  --network myFirstZitiNetwork \\\r\n  --network-alias ziti-controller \\\r\n  --network-alias ziti-edge-controller \\\r\n  -p 1280:1280 \\\r\n  -it \\\r\n  --rm \\\r\n  -v myPersistentZitiFiles:/persistent \\\r\n  openziti/quickstart \\\r\n  /var/openziti/scripts/run-controller.sh\n"})}),"\n",(0,i.jsx)(r.h2,{id:"create-edge-router-policies",children:"Create Edge Router Policies"}),"\n",(0,i.jsxs)(r.p,{children:["OpenZiti requires explicit authorization of identities using (",(0,i.jsx)(r.a,{href:"/docs/reference/glossary#edge-router-policy",children:"edge router policies"}),"),\r\nas well as authorization of services and routers using (",(0,i.jsx)(r.a,{href:"/docs/reference/glossary#service-edge-router-policy",children:"service edge router policies"}),").\r\nThe docker-based quickstart doesn't perform these steps automatically. Run the initialization container one time, after\r\nstarting the controller as shown"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-textell",children:"docker run \\\r\n  --network myFirstZitiNetwork \\\r\n  --network-alias ziti-controller-init-container \\\r\n  -it \\\r\n  --rm \\\r\n  -v myPersistentZitiFiles:/persistent \\\r\n  openziti/quickstart \\\r\n  /var/openziti/scripts/run-with-ziti-cli.sh  /var/openziti/scripts/access-control.sh\n"})}),"\n",(0,i.jsx)(r.h2,{id:"edge-router",children:"Edge Router"}),"\n",(0,i.jsxs)(r.p,{children:["At this point you should have a ",(0,i.jsx)(r.a,{href:"/docs/guides/deployments/linux/controller/deploy",children:"controller"})," running. You should have created your\r\nDocker network as well as creating the volume mount. Now it's time to connect your first edge router. The same Docker\r\nimage that runs the controller can run an edge router. To start an edge router, you will run a very similar command as\r\nthe one to start the controller with a couple of key differences."]}),"\n",(0,i.jsx)(r.p,{children:"The first noticeable difference is that we need to pass in the name of the edge router we want it to be. To use this\r\nnetwork, the name supplied needs tobe addressable by clients.  Also notice the port exported is port 3022. This is the\r\ndefault port used by edge routers."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-text",children:"docker run \\\r\n  --name ziti-edge-router-1 \\\r\n  -e ZITI_ROUTER_NAME=ziti-edge-router-1 \\\r\n  -e ZITI_ROUTER_ADVERTISED_ADDRESS=ziti-edge-router-1 \\\r\n  -e ZITI_ROUTER_ROLES=public \\\r\n  --network myFirstZitiNetwork \\\r\n  --network-alias ziti-edge-router-1 \\\r\n  -p 3022:3022 \\\r\n  -it \\\r\n  --rm \\\r\n  -v myPersistentZitiFiles:/persistent \\\r\n  openziti/quickstart \\\r\n  /var/openziti/scripts/run-router.sh edge\n"})}),"\n",(0,i.jsx)(r.p,{children:"If you want to create a second edge router, you'll need to override the router port, don't forget to export that port too"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-text",children:"docker run \\\r\n  --name ziti-edge-router-2 \\\r\n  -e ZITI_ROUTER_NAME=ziti-edge-router-2 \\\r\n  -e ZITI_ROUTER_ADVERTISED_ADDRESS=ziti-edge-router-2 \\\r\n  -e ZITI_ROUTER_PORT=4022 \\\r\n  -e ZITI_ROUTER_ROLES=public \\\r\n  --network myFirstZitiNetwork \\\r\n  --network-alias ziti-edge-router-2 \\\r\n  -p 4022:4022 \\\r\n  -it \\\r\n  --rm \\\r\n  -v myPersistentZitiFiles:/persistent \\\r\n  openziti/quickstart \\\r\n  /var/openziti/scripts/run-router.sh edge\n"})}),"\n",(0,i.jsx)(r.h2,{id:"testing-the-network",children:"Testing the Network"}),"\n",(0,i.jsx)(r.h3,{id:"using-docker-locally",children:"Using Docker Locally"}),"\n",(0,i.jsxs)(r.p,{children:["Using the network outside the docker environment is somewhat complex. The aliases chosen when starting the docker\r\ncontainers need to be addressable from wherever a client is connecting. This includes the ",(0,i.jsx)(r.code,{children:"ziti"})," CLI, tunnelers, SDKs,\r\netc. This quickstart expects you understand this and every router added to the overlay will require a route to the alias\r\nused. The easiest way to accomplish this is to use the operating system's ",(0,i.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Hosts_(file)",children:'"hosts file"'}),"\r\nbut a nameserver such as a ",(0,i.jsx)(r.a,{href:"https://pi-hole.net/",children:"pi hole"})," also works well. Understanding this concept in-depth is out\r\nof scope of this guide. It is assumed you have added the following entries to your operating\r\nsystem's hosts file or DNS nameserver:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"ziti-edge-controller"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"ziti-edge-router-1"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"ziti-edge-router-2"})}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"testing",children:"Testing"}),"\n",(0,i.jsxs)(r.p,{children:["With the controller and router running, you can now attach to the Docker host running the Ziti controller and test that\r\nthe router did indeed come online and is running as you expect. To do this, we'll use another feature of the ",(0,i.jsx)(r.code,{children:"docker"}),"\r\ncommand and ",(0,i.jsx)(r.code,{children:"exec"})," into the machine. First, you'll need to know your Docker container name which you can figure out by\r\nrunning ",(0,i.jsx)(r.code,{children:"docker ps"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-text",children:'$ docker ps\r\n\r\nCONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS\r\n                   NAMES\r\n1b86c4b461e7   openziti/quickstart   "/var/openziti/scripts/r\u2026"   10 minutes ago   Up 10 minutes   0.0.0.0:3022->3022/tcp, :::3022->3022/tcp   musing_engelbart\r\na33d58248d6e   openziti/quickstart   "/var/openziti/scripts/r\u2026"   46 minutes ago   Up 46 minutes   0.0.0.0:1280->1280/tcp, :::1280->1280/tcp   xenodochial_cori\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Above, you'll see my controller is running in a container named \"xenodochial_cori\". I can tell because it's using the\r\ndefault port of 1280, the default port for the controller. Now I can ",(0,i.jsx)(r.code,{children:"exec"})," into this\r\ncontainer: ",(0,i.jsx)(r.code,{children:"docker exec -it xenodochial_cori /bin/bash"})]}),"\n",(0,i.jsxs)(r.p,{children:["Once in the container, I can now issue ",(0,i.jsx)(r.code,{children:"zitiLogin"})," to authenticate the ",(0,i.jsx)(r.code,{children:"ziti"})," CLI."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-text",children:"zitiLogin\r\nToken: b16f182f-88b3-4fcc-9bfc-1e32319ca486\r\nSaving identity 'default' to /persistent/ziti-cli.json\n"})}),"\n",(0,i.jsxs)(r.p,{children:["And finally, once authenticated I can test to see if the edge router is online in the controller and as you'll see, the\r\n",(0,i.jsx)(r.code,{children:"isOnline"})," property is true!"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-text",children:"ziti@a33d58248d6e:/persistent$ ziti edge list edge-routers\r\nid: qNZyqZEix3    name: ziti-edge-router-1    isOnline: true    role attributes: {}\r\nresults: 1-1 of 1\n"})}),"\n",(0,i.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Now that you have your network in place, you probably want to try it out. Head to the\r\n",(0,i.jsx)(r.a,{href:"/docs/learn/quickstarts/services/",children:"Your First Service"})," quickstart and start learning how to use OpenZiti."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"/docs/learn/quickstarts/zac/#using-docker",children:"Install the console"})," (web UI)"]}),"\n",(0,i.jsxs)(r.li,{children:['Add a Second Public Router: In order for multiple routers to form transit links, they need a firewall exception to expose the "link listener" port. The default port is ',(0,i.jsx)(r.code,{children:"10080/tcp"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["Help","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/learn/quickstarts/network/help/change-admin-password",children:"Change Admin Password"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/learn/quickstarts/network/help/reset-quickstart",children:"Reset the Quickstart"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.A,{})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},2754:(e,r,t)=>{t.d(r,{A:()=>i});t(96540);var n=t(74848);function i(e){return(0,n.jsxs)("div",{id:"Wizardly",children:[(0,n.jsxs)("div",{className:"wizardmodal",children:[(0,n.jsx)("div",{className:"page-wrapper bg-img-1"}),(0,n.jsx)("div",{className:"page-wrapper",children:(0,n.jsxs)("div",{className:"wizard main",children:[(0,n.jsx)("div",{className:"container",children:(0,n.jsxs)("div",{className:"row",children:[(0,n.jsx)("div",{className:"whitez"}),(0,n.jsx)("h1",{id:"WizardTitle",className:"header-title"}),(0,n.jsx)("div",{className:"wizardclose"})]})}),(0,n.jsx)("div",{className:"ocontainer",children:(0,n.jsx)("div",{className:"zcontainer",children:(0,n.jsxs)("div",{role:"application",className:"wizard clearfix vertical",id:"steps-uid-0",children:[(0,n.jsx)("div",{className:"steps clearfix",children:(0,n.jsx)("ul",{id:"WizardTabs",role:"tablist"})}),(0,n.jsx)("div",{className:"content clearfix",children:(0,n.jsx)("div",{children:(0,n.jsx)("fieldset",{id:"WizardContents",role:"tabpanel",className:"body current","aria-hidden":"false"})})}),(0,n.jsx)("div",{className:"actions clearfix",children:(0,n.jsxs)("ul",{role:"menu","aria-label":"Pagination",children:[(0,n.jsx)("li",{children:(0,n.jsx)("button",{id:"WizardPreviousButton",children:"Previous"})}),(0,n.jsxs)("li",{children:[(0,n.jsx)("button",{id:"WizardNextButton",children:"Next"}),(0,n.jsx)("button",{id:"WizarFinishButton",children:"Finish"})]})]})})]})})})]})})]}),(0,n.jsx)("div",{className:"openWizard",children:"Try the Wizard"})]})}},28453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>l});var n=t(96540);const i={},o=n.createContext(i);function s(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);