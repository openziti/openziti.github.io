"use strict";(self.webpackChunkdocusaurus_3=self.webpackChunkdocusaurus_3||[]).push([[3675],{76869:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/deployments/docker/console","title":"Deploy the Console","description":"This article is about enabling the console on a controller that is running in a container.","source":"@site/docs/guides/deployments/20-docker/30-console.mdx","sourceDirName":"guides/deployments/20-docker","slug":"/guides/deployments/docker/console","permalink":"/docs/guides/deployments/docker/console","draft":false,"unlisted":false,"editUrl":"https://github.com/openziti/ziti-doc/tree/main/docusaurus/docs/guides/deployments/20-docker/30-console.mdx","tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"title":"Deploy the Console","sidebar_label":"Console"},"sidebar":"docsSidebar","previous":{"title":"Router","permalink":"/docs/guides/deployments/docker/router"},"next":{"title":"Kubernetes","permalink":"/docs/category/kubernetes"}}');var t=o(74848),i=o(28453);const r={title:"Deploy the Console",sidebar_label:"Console"},l=void 0,c={},d=[{value:"Upgrade",id:"upgrade",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This article is about enabling the console on a controller that is running in a container."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Configure the controller"}),"\n",(0,t.jsxs)(n.p,{children:["The console's ",(0,t.jsx)(n.code,{children:"zac"})," binding must be on the same web listener as the controller's management API, i.e., the ",(0,t.jsx)(n.code,{children:"edge-management"})," binding."]}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"      - binding: zac\n        options:\n          location: /ziti-console\n          indexFile: index.html\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"location"})," is the filesystem path to the static files of the console. In the controller container, the usual path is ",(0,t.jsx)(n.code,{children:"/ziti-console"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"indexFile"})," property is the entry point to the console."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"To apply the changes, the controller must be restarted."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Visit the console at ",(0,t.jsx)(n.code,{children:"/zac/"})," on the controller's address."]}),"\n",(0,t.jsxs)(n.p,{children:["The console is now available at ",(0,t.jsx)(n.code,{children:"https://<fqdn>:<port>/zac/"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Log in to the console."}),"\n",(0,t.jsx)(n.p,{children:"The only available authentication method for the console SPA is username and password."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Console certificate option - The console is served from the controller's API and can be used with the default API certificate. The controller can be configured to present a different certificate for the console when the API is accessed by a distinct URL for the console. For more information about using alternative server certs with the controller, see: ",(0,t.jsxs)(n.a,{href:"/docs/reference/configuration/conventions#identity",children:["the configuration reference for the ",(0,t.jsx)(n.code,{children:"identity"})," property"]}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"upgrade",children:"Upgrade"}),"\n",(0,t.jsx)(n.p,{children:"The controller container includes the latest version of the console. You can instead mount console versions >= 3.0.0."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Download a release."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"wget https://github.com/openziti/ziti-console/releases/latest/download/ziti-console.zip\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Unzip the static files and set read and list permission."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"unzip -d ./ziti-console ./ziti-console.zip\nchmod -R a+rX ./ziti-console\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Mount the console files read-only on the controller container."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"services:\n  ziti-controller:\n    volumes:\n      - ./ziti-console:/ziti-console:ro\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Restart the controller service to apply the changes."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"docker compose up ziti-controller --force-recreate\n"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var s=o(96540);const t={},i=s.createContext(t);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);